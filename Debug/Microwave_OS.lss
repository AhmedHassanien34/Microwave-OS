
Microwave_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00003bde  00003c72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008000c8  008000c8  00003cda  2**0
                  ALLOC
  3 .stab         000036cc  00000000  00000000  00003cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015d1  00000000  00000000  000073a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008979  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <main>
      8a:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac eb       	ldi	r26, 0xBC	; 188
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c eb       	ldi	r24, 0xBC	; 188
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c3 56       	subi	r28, 0x63	; 99
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	ed 59       	subi	r30, 0x9D	; 157
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW); /* Instruction Mode RS=0 */
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
     b7c:	fe 01       	movw	r30, r28
     b7e:	e1 5a       	subi	r30, 0xA1	; 161
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e8       	ldi	r26, 0x80	; 128
     b88:	bf e3       	ldi	r27, 0x3F	; 63
     b8a:	80 83       	st	Z, r24
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	a2 83       	std	Z+2, r26	; 0x02
     b90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	8e 01       	movw	r16, r28
     b94:	05 5a       	subi	r16, 0xA5	; 165
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	fe 01       	movw	r30, r28
     b9a:	e1 5a       	subi	r30, 0xA1	; 161
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	60 81       	ld	r22, Z
     ba0:	71 81       	ldd	r23, Z+1	; 0x01
     ba2:	82 81       	ldd	r24, Z+2	; 0x02
     ba4:	93 81       	ldd	r25, Z+3	; 0x03
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a ef       	ldi	r20, 0xFA	; 250
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	f8 01       	movw	r30, r16
     bb8:	80 83       	st	Z, r24
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	a2 83       	std	Z+2, r26	; 0x02
     bbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bc0:	fe 01       	movw	r30, r28
     bc2:	e5 5a       	subi	r30, 0xA5	; 165
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	44 f4       	brge	.+16     	; 0xbee <CLCD_voidSendCommand+0xa8>
		__ticks = 1;
     bde:	fe 01       	movw	r30, r28
     be0:	e7 5a       	subi	r30, 0xA7	; 167
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	80 83       	st	Z, r24
     bec:	64 c0       	rjmp	.+200    	; 0xcb6 <CLCD_voidSendCommand+0x170>
	else if (__tmp > 65535)
     bee:	fe 01       	movw	r30, r28
     bf0:	e5 5a       	subi	r30, 0xA5	; 165
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f e7       	ldi	r20, 0x7F	; 127
     c02:	57 e4       	ldi	r21, 0x47	; 71
     c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c08:	18 16       	cp	r1, r24
     c0a:	0c f0       	brlt	.+2      	; 0xc0e <CLCD_voidSendCommand+0xc8>
     c0c:	43 c0       	rjmp	.+134    	; 0xc94 <CLCD_voidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0e:	fe 01       	movw	r30, r28
     c10:	e1 5a       	subi	r30, 0xA1	; 161
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e2       	ldi	r20, 0x20	; 32
     c22:	51 e4       	ldi	r21, 0x41	; 65
     c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	8e 01       	movw	r16, r28
     c2e:	07 5a       	subi	r16, 0xA7	; 167
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	f8 01       	movw	r30, r16
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	1f c0       	rjmp	.+62     	; 0xc84 <CLCD_voidSendCommand+0x13e>
     c46:	fe 01       	movw	r30, r28
     c48:	e9 5a       	subi	r30, 0xA9	; 169
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	fe 01       	movw	r30, r28
     c56:	e9 5a       	subi	r30, 0xA9	; 169
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	fe 01       	movw	r30, r28
     c64:	e9 5a       	subi	r30, 0xA9	; 169
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	de 01       	movw	r26, r28
     c6e:	a7 5a       	subi	r26, 0xA7	; 167
     c70:	bf 4f       	sbci	r27, 0xFF	; 255
     c72:	fe 01       	movw	r30, r28
     c74:	e7 5a       	subi	r30, 0xA7	; 167
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c84:	fe 01       	movw	r30, r28
     c86:	e7 5a       	subi	r30, 0xA7	; 167
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	d1 f6       	brne	.-76     	; 0xc46 <CLCD_voidSendCommand+0x100>
     c92:	27 c0       	rjmp	.+78     	; 0xce2 <CLCD_voidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c94:	8e 01       	movw	r16, r28
     c96:	07 5a       	subi	r16, 0xA7	; 167
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	fe 01       	movw	r30, r28
     c9c:	e5 5a       	subi	r30, 0xA5	; 165
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	f8 01       	movw	r30, r16
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
     cb6:	de 01       	movw	r26, r28
     cb8:	ab 5a       	subi	r26, 0xAB	; 171
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e7 5a       	subi	r30, 0xA7	; 167
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	8d 93       	st	X+, r24
     cc8:	9c 93       	st	X, r25
     cca:	fe 01       	movw	r30, r28
     ccc:	eb 5a       	subi	r30, 0xAB	; 171
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <CLCD_voidSendCommand+0x18e>
     cd8:	fe 01       	movw	r30, r28
     cda:	eb 5a       	subi	r30, 0xAB	; 171
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	67 e0       	ldi	r22, 0x07	; 7
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
     cec:	fe 01       	movw	r30, r28
     cee:	ef 5a       	subi	r30, 0xAF	; 175
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e8       	ldi	r26, 0x80	; 128
     cf8:	bf e3       	ldi	r27, 0x3F	; 63
     cfa:	80 83       	st	Z, r24
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	a2 83       	std	Z+2, r26	; 0x02
     d00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d02:	8e 01       	movw	r16, r28
     d04:	03 5b       	subi	r16, 0xB3	; 179
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	fe 01       	movw	r30, r28
     d0a:	ef 5a       	subi	r30, 0xAF	; 175
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	4a ef       	ldi	r20, 0xFA	; 250
     d1c:	54 e4       	ldi	r21, 0x44	; 68
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	f8 01       	movw	r30, r16
     d28:	80 83       	st	Z, r24
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	a2 83       	std	Z+2, r26	; 0x02
     d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d30:	fe 01       	movw	r30, r28
     d32:	e3 5b       	subi	r30, 0xB3	; 179
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	44 f4       	brge	.+16     	; 0xd5e <CLCD_voidSendCommand+0x218>
		__ticks = 1;
     d4e:	fe 01       	movw	r30, r28
     d50:	e5 5b       	subi	r30, 0xB5	; 181
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
     d5c:	64 c0       	rjmp	.+200    	; 0xe26 <CLCD_voidSendCommand+0x2e0>
	else if (__tmp > 65535)
     d5e:	fe 01       	movw	r30, r28
     d60:	e3 5b       	subi	r30, 0xB3	; 179
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <CLCD_voidSendCommand+0x238>
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <CLCD_voidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	fe 01       	movw	r30, r28
     d80:	ef 5a       	subi	r30, 0xAF	; 175
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	8e 01       	movw	r16, r28
     d9e:	05 5b       	subi	r16, 0xB5	; 181
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	f8 01       	movw	r30, r16
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
     db4:	1f c0       	rjmp	.+62     	; 0xdf4 <CLCD_voidSendCommand+0x2ae>
     db6:	fe 01       	movw	r30, r28
     db8:	e7 5b       	subi	r30, 0xB7	; 183
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
     dc4:	fe 01       	movw	r30, r28
     dc6:	e7 5b       	subi	r30, 0xB7	; 183
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <CLCD_voidSendCommand+0x288>
     dd2:	fe 01       	movw	r30, r28
     dd4:	e7 5b       	subi	r30, 0xB7	; 183
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	de 01       	movw	r26, r28
     dde:	a5 5b       	subi	r26, 0xB5	; 181
     de0:	bf 4f       	sbci	r27, 0xFF	; 255
     de2:	fe 01       	movw	r30, r28
     de4:	e5 5b       	subi	r30, 0xB5	; 181
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	fe 01       	movw	r30, r28
     df6:	e5 5b       	subi	r30, 0xB5	; 181
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	d1 f6       	brne	.-76     	; 0xdb6 <CLCD_voidSendCommand+0x270>
     e02:	27 c0       	rjmp	.+78     	; 0xe52 <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	8e 01       	movw	r16, r28
     e06:	05 5b       	subi	r16, 0xB5	; 181
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	fe 01       	movw	r30, r28
     e0c:	e3 5b       	subi	r30, 0xB3	; 179
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	f8 01       	movw	r30, r16
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	de 01       	movw	r26, r28
     e28:	a9 5b       	subi	r26, 0xB9	; 185
     e2a:	bf 4f       	sbci	r27, 0xFF	; 255
     e2c:	fe 01       	movw	r30, r28
     e2e:	e5 5b       	subi	r30, 0xB5	; 181
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	8d 93       	st	X+, r24
     e38:	9c 93       	st	X, r25
     e3a:	fe 01       	movw	r30, r28
     e3c:	e9 5b       	subi	r30, 0xB9	; 185
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <CLCD_voidSendCommand+0x2fe>
     e48:	fe 01       	movw	r30, r28
     e4a:	e9 5b       	subi	r30, 0xB9	; 185
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */



#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
     e52:	fe 01       	movw	r30, r28
     e54:	ed 59       	subi	r30, 0x9D	; 157
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	82 95       	swap	r24
     e5c:	8f 70       	andi	r24, 0x0F	; 15
     e5e:	98 2f       	mov	r25, r24
     e60:	91 70       	andi	r25, 0x01	; 1
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	49 2f       	mov	r20, r25
     e68:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
     e6c:	fe 01       	movw	r30, r28
     e6e:	ed 59       	subi	r30, 0x9D	; 157
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	82 95       	swap	r24
     e76:	86 95       	lsr	r24
     e78:	87 70       	andi	r24, 0x07	; 7
     e7a:	98 2f       	mov	r25, r24
     e7c:	91 70       	andi	r25, 0x01	; 1
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	49 2f       	mov	r20, r25
     e84:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
     e88:	fe 01       	movw	r30, r28
     e8a:	ed 59       	subi	r30, 0x9D	; 157
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	82 95       	swap	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	83 70       	andi	r24, 0x03	; 3
     e98:	98 2f       	mov	r25, r24
     e9a:	91 70       	andi	r25, 0x01	; 1
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	49 2f       	mov	r20, r25
     ea2:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
     ea6:	fe 01       	movw	r30, r28
     ea8:	ed 59       	subi	r30, 0x9D	; 157
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	80 81       	ld	r24, Z
     eae:	98 2f       	mov	r25, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	99 27       	eor	r25, r25
     eb4:	99 1f       	adc	r25, r25
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	63 e0       	ldi	r22, 0x03	; 3
     eba:	49 2f       	mov	r20, r25
     ebc:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 5b       	subi	r30, 0xBD	; 189
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e8       	ldi	r26, 0x80	; 128
     ecc:	bf e3       	ldi	r27, 0x3F	; 63
     ece:	80 83       	st	Z, r24
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	a2 83       	std	Z+2, r26	; 0x02
     ed4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	8e 01       	movw	r16, r28
     ed8:	01 5c       	subi	r16, 0xC1	; 193
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	ed 5b       	subi	r30, 0xBD	; 189
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	a2 83       	std	Z+2, r26	; 0x02
     f02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f04:	fe 01       	movw	r30, r28
     f06:	ff 96       	adiw	r30, 0x3f	; 63
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <CLCD_voidSendCommand+0x3e4>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e af       	std	Y+62, r25	; 0x3e
     f26:	8d af       	std	Y+61, r24	; 0x3d
     f28:	46 c0       	rjmp	.+140    	; 0xfb6 <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
     f2a:	fe 01       	movw	r30, r28
     f2c:	ff 96       	adiw	r30, 0x3f	; 63
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	64 f5       	brge	.+88     	; 0xf9e <CLCD_voidSendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	fe 01       	movw	r30, r28
     f48:	ed 5b       	subi	r30, 0xBD	; 189
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e af       	std	Y+62, r25	; 0x3e
     f72:	8d af       	std	Y+61, r24	; 0x3d
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <CLCD_voidSendCommand+0x44e>
     f76:	88 ec       	ldi	r24, 0xC8	; 200
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c af       	std	Y+60, r25	; 0x3c
     f7c:	8b af       	std	Y+59, r24	; 0x3b
     f7e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f80:	9c ad       	ldd	r25, Y+60	; 0x3c
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <CLCD_voidSendCommand+0x43c>
     f86:	9c af       	std	Y+60, r25	; 0x3c
     f88:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9e af       	std	Y+62, r25	; 0x3e
     f92:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8d ad       	ldd	r24, Y+61	; 0x3d
     f96:	9e ad       	ldd	r25, Y+62	; 0x3e
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <CLCD_voidSendCommand+0x430>
     f9c:	16 c0       	rjmp	.+44     	; 0xfca <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	fe 01       	movw	r30, r28
     fa0:	ff 96       	adiw	r30, 0x3f	; 63
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9e af       	std	Y+62, r25	; 0x3e
     fb4:	8d af       	std	Y+61, r24	; 0x3d
     fb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb8:	9e ad       	ldd	r25, Y+62	; 0x3e
     fba:	9a af       	std	Y+58, r25	; 0x3a
     fbc:	89 af       	std	Y+57, r24	; 0x39
     fbe:	89 ad       	ldd	r24, Y+57	; 0x39
     fc0:	9a ad       	ldd	r25, Y+58	; 0x3a
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <CLCD_voidSendCommand+0x47c>
     fc6:	9a af       	std	Y+58, r25	; 0x3a
     fc8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	67 e0       	ldi	r22, 0x07	; 7
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 e8       	ldi	r26, 0x80	; 128
     fda:	bf e3       	ldi	r27, 0x3F	; 63
     fdc:	8d ab       	std	Y+53, r24	; 0x35
     fde:	9e ab       	std	Y+54, r25	; 0x36
     fe0:	af ab       	std	Y+55, r26	; 0x37
     fe2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	89 ab       	std	Y+49, r24	; 0x31
     ffe:	9a ab       	std	Y+50, r25	; 0x32
    1000:	ab ab       	std	Y+51, r26	; 0x33
    1002:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1004:	69 a9       	ldd	r22, Y+49	; 0x31
    1006:	7a a9       	ldd	r23, Y+50	; 0x32
    1008:	8b a9       	ldd	r24, Y+51	; 0x33
    100a:	9c a9       	ldd	r25, Y+52	; 0x34
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <CLCD_voidSendCommand+0x4e0>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	98 ab       	std	Y+48, r25	; 0x30
    1022:	8f a7       	std	Y+47, r24	; 0x2f
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <CLCD_voidSendCommand+0x55e>
	else if (__tmp > 65535)
    1026:	69 a9       	ldd	r22, Y+49	; 0x31
    1028:	7a a9       	ldd	r23, Y+50	; 0x32
    102a:	8b a9       	ldd	r24, Y+51	; 0x33
    102c:	9c a9       	ldd	r25, Y+52	; 0x34
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <CLCD_voidSendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6d a9       	ldd	r22, Y+53	; 0x35
    1040:	7e a9       	ldd	r23, Y+54	; 0x36
    1042:	8f a9       	ldd	r24, Y+55	; 0x37
    1044:	98 ad       	ldd	r25, Y+56	; 0x38
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	98 ab       	std	Y+48, r25	; 0x30
    1064:	8f a7       	std	Y+47, r24	; 0x2f
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <CLCD_voidSendCommand+0x540>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9e a7       	std	Y+46, r25	; 0x2e
    106e:	8d a7       	std	Y+45, r24	; 0x2d
    1070:	8d a5       	ldd	r24, Y+45	; 0x2d
    1072:	9e a5       	ldd	r25, Y+46	; 0x2e
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <CLCD_voidSendCommand+0x52e>
    1078:	9e a7       	std	Y+46, r25	; 0x2e
    107a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8f a5       	ldd	r24, Y+47	; 0x2f
    107e:	98 a9       	ldd	r25, Y+48	; 0x30
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8f a5       	ldd	r24, Y+47	; 0x2f
    1088:	98 a9       	ldd	r25, Y+48	; 0x30
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <CLCD_voidSendCommand+0x522>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <CLCD_voidSendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	69 a9       	ldd	r22, Y+49	; 0x31
    1092:	7a a9       	ldd	r23, Y+50	; 0x32
    1094:	8b a9       	ldd	r24, Y+51	; 0x33
    1096:	9c a9       	ldd	r25, Y+52	; 0x34
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	98 ab       	std	Y+48, r25	; 0x30
    10a2:	8f a7       	std	Y+47, r24	; 0x2f
    10a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a6:	98 a9       	ldd	r25, Y+48	; 0x30
    10a8:	9c a7       	std	Y+44, r25	; 0x2c
    10aa:	8b a7       	std	Y+43, r24	; 0x2b
    10ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <CLCD_voidSendCommand+0x56a>
    10b4:	9c a7       	std	Y+44, r25	; 0x2c
    10b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	67 e0       	ldi	r22, 0x07	; 7
    10bc:	41 e0       	ldi	r20, 0x01	; 1
    10be:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e8       	ldi	r26, 0x80	; 128
    10c8:	bf e3       	ldi	r27, 0x3F	; 63
    10ca:	8f a3       	std	Y+39, r24	; 0x27
    10cc:	98 a7       	std	Y+40, r25	; 0x28
    10ce:	a9 a7       	std	Y+41, r26	; 0x29
    10d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d2:	6f a1       	ldd	r22, Y+39	; 0x27
    10d4:	78 a5       	ldd	r23, Y+40	; 0x28
    10d6:	89 a5       	ldd	r24, Y+41	; 0x29
    10d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a ef       	ldi	r20, 0xFA	; 250
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8b a3       	std	Y+35, r24	; 0x23
    10ec:	9c a3       	std	Y+36, r25	; 0x24
    10ee:	ad a3       	std	Y+37, r26	; 0x25
    10f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f2:	6b a1       	ldd	r22, Y+35	; 0x23
    10f4:	7c a1       	ldd	r23, Y+36	; 0x24
    10f6:	8d a1       	ldd	r24, Y+37	; 0x25
    10f8:	9e a1       	ldd	r25, Y+38	; 0x26
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	2c f4       	brge	.+10     	; 0x1114 <CLCD_voidSendCommand+0x5ce>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9a a3       	std	Y+34, r25	; 0x22
    1110:	89 a3       	std	Y+33, r24	; 0x21
    1112:	3f c0       	rjmp	.+126    	; 0x1192 <CLCD_voidSendCommand+0x64c>
	else if (__tmp > 65535)
    1114:	6b a1       	ldd	r22, Y+35	; 0x23
    1116:	7c a1       	ldd	r23, Y+36	; 0x24
    1118:	8d a1       	ldd	r24, Y+37	; 0x25
    111a:	9e a1       	ldd	r25, Y+38	; 0x26
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	4f e7       	ldi	r20, 0x7F	; 127
    1122:	57 e4       	ldi	r21, 0x47	; 71
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1128:	18 16       	cp	r1, r24
    112a:	4c f5       	brge	.+82     	; 0x117e <CLCD_voidSendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112c:	6f a1       	ldd	r22, Y+39	; 0x27
    112e:	78 a5       	ldd	r23, Y+40	; 0x28
    1130:	89 a5       	ldd	r24, Y+41	; 0x29
    1132:	9a a5       	ldd	r25, Y+42	; 0x2a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9a a3       	std	Y+34, r25	; 0x22
    1152:	89 a3       	std	Y+33, r24	; 0x21
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <CLCD_voidSendCommand+0x62e>
    1156:	88 ec       	ldi	r24, 0xC8	; 200
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	98 a3       	std	Y+32, r25	; 0x20
    115c:	8f 8f       	std	Y+31, r24	; 0x1f
    115e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1160:	98 a1       	ldd	r25, Y+32	; 0x20
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <CLCD_voidSendCommand+0x61c>
    1166:	98 a3       	std	Y+32, r25	; 0x20
    1168:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	89 a1       	ldd	r24, Y+33	; 0x21
    116c:	9a a1       	ldd	r25, Y+34	; 0x22
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9a a3       	std	Y+34, r25	; 0x22
    1172:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1174:	89 a1       	ldd	r24, Y+33	; 0x21
    1176:	9a a1       	ldd	r25, Y+34	; 0x22
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f7       	brne	.-38     	; 0x1156 <CLCD_voidSendCommand+0x610>
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <CLCD_voidSendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117e:	6b a1       	ldd	r22, Y+35	; 0x23
    1180:	7c a1       	ldd	r23, Y+36	; 0x24
    1182:	8d a1       	ldd	r24, Y+37	; 0x25
    1184:	9e a1       	ldd	r25, Y+38	; 0x26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9a a3       	std	Y+34, r25	; 0x22
    1190:	89 a3       	std	Y+33, r24	; 0x21
    1192:	89 a1       	ldd	r24, Y+33	; 0x21
    1194:	9a a1       	ldd	r25, Y+34	; 0x22
    1196:	9e 8f       	std	Y+30, r25	; 0x1e
    1198:	8d 8f       	std	Y+29, r24	; 0x1d
    119a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    119c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <CLCD_voidSendCommand+0x658>
    11a2:	9e 8f       	std	Y+30, r25	; 0x1e
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    11a6:	fe 01       	movw	r30, r28
    11a8:	ed 59       	subi	r30, 0x9D	; 157
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	98 2f       	mov	r25, r24
    11b0:	91 70       	andi	r25, 0x01	; 1
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	49 2f       	mov	r20, r25
    11b8:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    11bc:	fe 01       	movw	r30, r28
    11be:	ed 59       	subi	r30, 0x9D	; 157
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	86 95       	lsr	r24
    11c6:	98 2f       	mov	r25, r24
    11c8:	91 70       	andi	r25, 0x01	; 1
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	49 2f       	mov	r20, r25
    11d0:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    11d4:	fe 01       	movw	r30, r28
    11d6:	ed 59       	subi	r30, 0x9D	; 157
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	98 2f       	mov	r25, r24
    11e2:	91 70       	andi	r25, 0x01	; 1
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	62 e0       	ldi	r22, 0x02	; 2
    11e8:	49 2f       	mov	r20, r25
    11ea:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    11ee:	fe 01       	movw	r30, r28
    11f0:	ed 59       	subi	r30, 0x9D	; 157
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	86 95       	lsr	r24
    11f8:	86 95       	lsr	r24
    11fa:	86 95       	lsr	r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	91 70       	andi	r25, 0x01	; 1
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	63 e0       	ldi	r22, 0x03	; 3
    1204:	49 2f       	mov	r20, r25
    1206:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e8       	ldi	r26, 0x80	; 128
    1210:	bf e3       	ldi	r27, 0x3F	; 63
    1212:	89 8f       	std	Y+25, r24	; 0x19
    1214:	9a 8f       	std	Y+26, r25	; 0x1a
    1216:	ab 8f       	std	Y+27, r26	; 0x1b
    1218:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	69 8d       	ldd	r22, Y+25	; 0x19
    121c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    121e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1220:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8d 8b       	std	Y+21, r24	; 0x15
    1234:	9e 8b       	std	Y+22, r25	; 0x16
    1236:	af 8b       	std	Y+23, r26	; 0x17
    1238:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    123a:	6d 89       	ldd	r22, Y+21	; 0x15
    123c:	7e 89       	ldd	r23, Y+22	; 0x16
    123e:	8f 89       	ldd	r24, Y+23	; 0x17
    1240:	98 8d       	ldd	r25, Y+24	; 0x18
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <CLCD_voidSendCommand+0x716>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9c 8b       	std	Y+20, r25	; 0x14
    1258:	8b 8b       	std	Y+19, r24	; 0x13
    125a:	3f c0       	rjmp	.+126    	; 0x12da <CLCD_voidSendCommand+0x794>
	else if (__tmp > 65535)
    125c:	6d 89       	ldd	r22, Y+21	; 0x15
    125e:	7e 89       	ldd	r23, Y+22	; 0x16
    1260:	8f 89       	ldd	r24, Y+23	; 0x17
    1262:	98 8d       	ldd	r25, Y+24	; 0x18
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <CLCD_voidSendCommand+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	69 8d       	ldd	r22, Y+25	; 0x19
    1276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <CLCD_voidSendCommand+0x776>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9a 8b       	std	Y+18, r25	; 0x12
    12a4:	89 8b       	std	Y+17, r24	; 0x11
    12a6:	89 89       	ldd	r24, Y+17	; 0x11
    12a8:	9a 89       	ldd	r25, Y+18	; 0x12
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <CLCD_voidSendCommand+0x764>
    12ae:	9a 8b       	std	Y+18, r25	; 0x12
    12b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	8b 89       	ldd	r24, Y+19	; 0x13
    12b4:	9c 89       	ldd	r25, Y+20	; 0x14
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <CLCD_voidSendCommand+0x758>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <CLCD_voidSendCommand+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6d 89       	ldd	r22, Y+21	; 0x15
    12c8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ca:	8f 89       	ldd	r24, Y+23	; 0x17
    12cc:	98 8d       	ldd	r25, Y+24	; 0x18
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9c 8b       	std	Y+20, r25	; 0x14
    12d8:	8b 8b       	std	Y+19, r24	; 0x13
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	98 8b       	std	Y+16, r25	; 0x10
    12e0:	8f 87       	std	Y+15, r24	; 0x0f
    12e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e4:	98 89       	ldd	r25, Y+16	; 0x10
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <CLCD_voidSendCommand+0x7a0>
    12ea:	98 8b       	std	Y+16, r25	; 0x10
    12ec:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	67 e0       	ldi	r22, 0x07	; 7
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e8       	ldi	r26, 0x80	; 128
    12fe:	bf e3       	ldi	r27, 0x3F	; 63
    1300:	8b 87       	std	Y+11, r24	; 0x0b
    1302:	9c 87       	std	Y+12, r25	; 0x0c
    1304:	ad 87       	std	Y+13, r26	; 0x0d
    1306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a ef       	ldi	r20, 0xFA	; 250
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	98 87       	std	Y+8, r25	; 0x08
    1324:	a9 87       	std	Y+9, r26	; 0x09
    1326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <CLCD_voidSendCommand+0x804>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <CLCD_voidSendCommand+0x882>
	else if (__tmp > 65535)
    134a:	6f 81       	ldd	r22, Y+7	; 0x07
    134c:	78 85       	ldd	r23, Y+8	; 0x08
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135e:	18 16       	cp	r1, r24
    1360:	4c f5       	brge	.+82     	; 0x13b4 <CLCD_voidSendCommand+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <CLCD_voidSendCommand+0x864>
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <CLCD_voidSendCommand+0x852>
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	69 f7       	brne	.-38     	; 0x138c <CLCD_voidSendCommand+0x846>
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <CLCD_voidSendCommand+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <CLCD_voidSendCommand+0x88e>
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=1 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    13dc:	cd 59       	subi	r28, 0x9D	; 157
    13de:	df 4f       	sbci	r29, 0xFF	; 255
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	c3 56       	subi	r28, 0x63	; 99
    1402:	d0 40       	sbci	r29, 0x00	; 0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	fe 01       	movw	r30, r28
    1410:	ed 59       	subi	r30, 0x9D	; 157
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH); /* Data Mode RS=1 */
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    142a:	fe 01       	movw	r30, r28
    142c:	e1 5a       	subi	r30, 0xA1	; 161
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e8       	ldi	r26, 0x80	; 128
    1436:	bf e3       	ldi	r27, 0x3F	; 63
    1438:	80 83       	st	Z, r24
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	a2 83       	std	Z+2, r26	; 0x02
    143e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	8e 01       	movw	r16, r28
    1442:	05 5a       	subi	r16, 0xA5	; 165
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	fe 01       	movw	r30, r28
    1448:	e1 5a       	subi	r30, 0xA1	; 161
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a ef       	ldi	r20, 0xFA	; 250
    145a:	54 e4       	ldi	r21, 0x44	; 68
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	f8 01       	movw	r30, r16
    1466:	80 83       	st	Z, r24
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	a2 83       	std	Z+2, r26	; 0x02
    146c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    146e:	fe 01       	movw	r30, r28
    1470:	e5 5a       	subi	r30, 0xA5	; 165
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	44 f4       	brge	.+16     	; 0x149c <CLCD_voidSendData+0xa8>
		__ticks = 1;
    148c:	fe 01       	movw	r30, r28
    148e:	e7 5a       	subi	r30, 0xA7	; 167
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
    149a:	64 c0       	rjmp	.+200    	; 0x1564 <CLCD_voidSendData+0x170>
	else if (__tmp > 65535)
    149c:	fe 01       	movw	r30, r28
    149e:	e5 5a       	subi	r30, 0xA5	; 165
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <CLCD_voidSendData+0xc8>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <CLCD_voidSendData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	fe 01       	movw	r30, r28
    14be:	e1 5a       	subi	r30, 0xA1	; 161
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8e 01       	movw	r16, r28
    14dc:	07 5a       	subi	r16, 0xA7	; 167
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	f8 01       	movw	r30, r16
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	1f c0       	rjmp	.+62     	; 0x1532 <CLCD_voidSendData+0x13e>
    14f4:	fe 01       	movw	r30, r28
    14f6:	e9 5a       	subi	r30, 0xA9	; 169
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	88 ec       	ldi	r24, 0xC8	; 200
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	fe 01       	movw	r30, r28
    1504:	e9 5a       	subi	r30, 0xA9	; 169
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <CLCD_voidSendData+0x118>
    1510:	fe 01       	movw	r30, r28
    1512:	e9 5a       	subi	r30, 0xA9	; 169
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	de 01       	movw	r26, r28
    151c:	a7 5a       	subi	r26, 0xA7	; 167
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	e7 5a       	subi	r30, 0xA7	; 167
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	9c 93       	st	X, r25
    1530:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	fe 01       	movw	r30, r28
    1534:	e7 5a       	subi	r30, 0xA7	; 167
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	d1 f6       	brne	.-76     	; 0x14f4 <CLCD_voidSendData+0x100>
    1540:	27 c0       	rjmp	.+78     	; 0x1590 <CLCD_voidSendData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	8e 01       	movw	r16, r28
    1544:	07 5a       	subi	r16, 0xA7	; 167
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	fe 01       	movw	r30, r28
    154a:	e5 5a       	subi	r30, 0xA5	; 165
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	de 01       	movw	r26, r28
    1566:	ab 5a       	subi	r26, 0xAB	; 171
    1568:	bf 4f       	sbci	r27, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e7 5a       	subi	r30, 0xA7	; 167
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	8d 93       	st	X+, r24
    1576:	9c 93       	st	X, r25
    1578:	fe 01       	movw	r30, r28
    157a:	eb 5a       	subi	r30, 0xAB	; 171
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <CLCD_voidSendData+0x18e>
    1586:	fe 01       	movw	r30, r28
    1588:	eb 5a       	subi	r30, 0xAB	; 171
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	67 e0       	ldi	r22, 0x07	; 7
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    159a:	fe 01       	movw	r30, r28
    159c:	ef 5a       	subi	r30, 0xAF	; 175
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 e8       	ldi	r26, 0x80	; 128
    15a6:	bf e3       	ldi	r27, 0x3F	; 63
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	8e 01       	movw	r16, r28
    15b2:	03 5b       	subi	r16, 0xB3	; 179
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	fe 01       	movw	r30, r28
    15b8:	ef 5a       	subi	r30, 0xAF	; 175
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	f8 01       	movw	r30, r16
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15de:	fe 01       	movw	r30, r28
    15e0:	e3 5b       	subi	r30, 0xB3	; 179
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	44 f4       	brge	.+16     	; 0x160c <CLCD_voidSendData+0x218>
		__ticks = 1;
    15fc:	fe 01       	movw	r30, r28
    15fe:	e5 5b       	subi	r30, 0xB5	; 181
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	64 c0       	rjmp	.+200    	; 0x16d4 <CLCD_voidSendData+0x2e0>
	else if (__tmp > 65535)
    160c:	fe 01       	movw	r30, r28
    160e:	e3 5b       	subi	r30, 0xB3	; 179
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	0c f0       	brlt	.+2      	; 0x162c <CLCD_voidSendData+0x238>
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <CLCD_voidSendData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	fe 01       	movw	r30, r28
    162e:	ef 5a       	subi	r30, 0xAF	; 175
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8e 01       	movw	r16, r28
    164c:	05 5b       	subi	r16, 0xB5	; 181
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	1f c0       	rjmp	.+62     	; 0x16a2 <CLCD_voidSendData+0x2ae>
    1664:	fe 01       	movw	r30, r28
    1666:	e7 5b       	subi	r30, 0xB7	; 183
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	fe 01       	movw	r30, r28
    1674:	e7 5b       	subi	r30, 0xB7	; 183
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <CLCD_voidSendData+0x288>
    1680:	fe 01       	movw	r30, r28
    1682:	e7 5b       	subi	r30, 0xB7	; 183
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	de 01       	movw	r26, r28
    168c:	a5 5b       	subi	r26, 0xB5	; 181
    168e:	bf 4f       	sbci	r27, 0xFF	; 255
    1690:	fe 01       	movw	r30, r28
    1692:	e5 5b       	subi	r30, 0xB5	; 181
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	fe 01       	movw	r30, r28
    16a4:	e5 5b       	subi	r30, 0xB5	; 181
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	d1 f6       	brne	.-76     	; 0x1664 <CLCD_voidSendData+0x270>
    16b0:	27 c0       	rjmp	.+78     	; 0x1700 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	8e 01       	movw	r16, r28
    16b4:	05 5b       	subi	r16, 0xB5	; 181
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	e3 5b       	subi	r30, 0xB3	; 179
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
    16d4:	de 01       	movw	r26, r28
    16d6:	a9 5b       	subi	r26, 0xB9	; 185
    16d8:	bf 4f       	sbci	r27, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	e5 5b       	subi	r30, 0xB5	; 181
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	8d 93       	st	X+, r24
    16e6:	9c 93       	st	X, r25
    16e8:	fe 01       	movw	r30, r28
    16ea:	e9 5b       	subi	r30, 0xB9	; 185
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <CLCD_voidSendData+0x2fe>
    16f6:	fe 01       	movw	r30, r28
    16f8:	e9 5b       	subi	r30, 0xB9	; 185
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    1700:	fe 01       	movw	r30, r28
    1702:	ed 59       	subi	r30, 0x9D	; 157
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 81       	ld	r24, Z
    1708:	82 95       	swap	r24
    170a:	8f 70       	andi	r24, 0x0F	; 15
    170c:	98 2f       	mov	r25, r24
    170e:	91 70       	andi	r25, 0x01	; 1
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	49 2f       	mov	r20, r25
    1716:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    171a:	fe 01       	movw	r30, r28
    171c:	ed 59       	subi	r30, 0x9D	; 157
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	82 95       	swap	r24
    1724:	86 95       	lsr	r24
    1726:	87 70       	andi	r24, 0x07	; 7
    1728:	98 2f       	mov	r25, r24
    172a:	91 70       	andi	r25, 0x01	; 1
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	49 2f       	mov	r20, r25
    1732:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    1736:	fe 01       	movw	r30, r28
    1738:	ed 59       	subi	r30, 0x9D	; 157
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	82 95       	swap	r24
    1740:	86 95       	lsr	r24
    1742:	86 95       	lsr	r24
    1744:	83 70       	andi	r24, 0x03	; 3
    1746:	98 2f       	mov	r25, r24
    1748:	91 70       	andi	r25, 0x01	; 1
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	62 e0       	ldi	r22, 0x02	; 2
    174e:	49 2f       	mov	r20, r25
    1750:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    1754:	fe 01       	movw	r30, r28
    1756:	ed 59       	subi	r30, 0x9D	; 157
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	98 2f       	mov	r25, r24
    175e:	99 1f       	adc	r25, r25
    1760:	99 27       	eor	r25, r25
    1762:	99 1f       	adc	r25, r25
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	63 e0       	ldi	r22, 0x03	; 3
    1768:	49 2f       	mov	r20, r25
    176a:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    176e:	fe 01       	movw	r30, r28
    1770:	ed 5b       	subi	r30, 0xBD	; 189
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e8       	ldi	r26, 0x80	; 128
    177a:	bf e3       	ldi	r27, 0x3F	; 63
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	8e 01       	movw	r16, r28
    1786:	01 5c       	subi	r16, 0xC1	; 193
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	ed 5b       	subi	r30, 0xBD	; 189
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a ef       	ldi	r20, 0xFA	; 250
    179e:	54 e4       	ldi	r21, 0x44	; 68
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	a2 83       	std	Z+2, r26	; 0x02
    17b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b2:	fe 01       	movw	r30, r28
    17b4:	ff 96       	adiw	r30, 0x3f	; 63
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <CLCD_voidSendData+0x3e4>
		__ticks = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9e af       	std	Y+62, r25	; 0x3e
    17d4:	8d af       	std	Y+61, r24	; 0x3d
    17d6:	46 c0       	rjmp	.+140    	; 0x1864 <CLCD_voidSendData+0x470>
	else if (__tmp > 65535)
    17d8:	fe 01       	movw	r30, r28
    17da:	ff 96       	adiw	r30, 0x3f	; 63
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	64 f5       	brge	.+88     	; 0x184c <CLCD_voidSendData+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	fe 01       	movw	r30, r28
    17f6:	ed 5b       	subi	r30, 0xBD	; 189
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e af       	std	Y+62, r25	; 0x3e
    1820:	8d af       	std	Y+61, r24	; 0x3d
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <CLCD_voidSendData+0x44e>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c af       	std	Y+60, r25	; 0x3c
    182a:	8b af       	std	Y+59, r24	; 0x3b
    182c:	8b ad       	ldd	r24, Y+59	; 0x3b
    182e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <CLCD_voidSendData+0x43c>
    1834:	9c af       	std	Y+60, r25	; 0x3c
    1836:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d ad       	ldd	r24, Y+61	; 0x3d
    183a:	9e ad       	ldd	r25, Y+62	; 0x3e
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e af       	std	Y+62, r25	; 0x3e
    1840:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d ad       	ldd	r24, Y+61	; 0x3d
    1844:	9e ad       	ldd	r25, Y+62	; 0x3e
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <CLCD_voidSendData+0x430>
    184a:	16 c0       	rjmp	.+44     	; 0x1878 <CLCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	fe 01       	movw	r30, r28
    184e:	ff 96       	adiw	r30, 0x3f	; 63
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e af       	std	Y+62, r25	; 0x3e
    1862:	8d af       	std	Y+61, r24	; 0x3d
    1864:	8d ad       	ldd	r24, Y+61	; 0x3d
    1866:	9e ad       	ldd	r25, Y+62	; 0x3e
    1868:	9a af       	std	Y+58, r25	; 0x3a
    186a:	89 af       	std	Y+57, r24	; 0x39
    186c:	89 ad       	ldd	r24, Y+57	; 0x39
    186e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <CLCD_voidSendData+0x47c>
    1874:	9a af       	std	Y+58, r25	; 0x3a
    1876:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	67 e0       	ldi	r22, 0x07	; 7
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e8       	ldi	r26, 0x80	; 128
    1888:	bf e3       	ldi	r27, 0x3F	; 63
    188a:	8d ab       	std	Y+53, r24	; 0x35
    188c:	9e ab       	std	Y+54, r25	; 0x36
    188e:	af ab       	std	Y+55, r26	; 0x37
    1890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6d a9       	ldd	r22, Y+53	; 0x35
    1894:	7e a9       	ldd	r23, Y+54	; 0x36
    1896:	8f a9       	ldd	r24, Y+55	; 0x37
    1898:	98 ad       	ldd	r25, Y+56	; 0x38
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 ab       	std	Y+49, r24	; 0x31
    18ac:	9a ab       	std	Y+50, r25	; 0x32
    18ae:	ab ab       	std	Y+51, r26	; 0x33
    18b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <CLCD_voidSendData+0x4e0>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <CLCD_voidSendData+0x55e>
	else if (__tmp > 65535)
    18d4:	69 a9       	ldd	r22, Y+49	; 0x31
    18d6:	7a a9       	ldd	r23, Y+50	; 0x32
    18d8:	8b a9       	ldd	r24, Y+51	; 0x33
    18da:	9c a9       	ldd	r25, Y+52	; 0x34
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <CLCD_voidSendData+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6d a9       	ldd	r22, Y+53	; 0x35
    18ee:	7e a9       	ldd	r23, Y+54	; 0x36
    18f0:	8f a9       	ldd	r24, Y+55	; 0x37
    18f2:	98 ad       	ldd	r25, Y+56	; 0x38
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <CLCD_voidSendData+0x540>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	8d a7       	std	Y+45, r24	; 0x2d
    191e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1920:	9e a5       	ldd	r25, Y+46	; 0x2e
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <CLCD_voidSendData+0x52e>
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <CLCD_voidSendData+0x522>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <CLCD_voidSendData+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	69 a9       	ldd	r22, Y+49	; 0x31
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b a9       	ldd	r24, Y+51	; 0x33
    1944:	9c a9       	ldd	r25, Y+52	; 0x34
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	9c a7       	std	Y+44, r25	; 0x2c
    1958:	8b a7       	std	Y+43, r24	; 0x2b
    195a:	8b a5       	ldd	r24, Y+43	; 0x2b
    195c:	9c a5       	ldd	r25, Y+44	; 0x2c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <CLCD_voidSendData+0x56a>
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	67 e0       	ldi	r22, 0x07	; 7
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e8       	ldi	r26, 0x80	; 128
    1976:	bf e3       	ldi	r27, 0x3F	; 63
    1978:	8f a3       	std	Y+39, r24	; 0x27
    197a:	98 a7       	std	Y+40, r25	; 0x28
    197c:	a9 a7       	std	Y+41, r26	; 0x29
    197e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6f a1       	ldd	r22, Y+39	; 0x27
    1982:	78 a5       	ldd	r23, Y+40	; 0x28
    1984:	89 a5       	ldd	r24, Y+41	; 0x29
    1986:	9a a5       	ldd	r25, Y+42	; 0x2a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8b a3       	std	Y+35, r24	; 0x23
    199a:	9c a3       	std	Y+36, r25	; 0x24
    199c:	ad a3       	std	Y+37, r26	; 0x25
    199e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <CLCD_voidSendData+0x5ce>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <CLCD_voidSendData+0x64c>
	else if (__tmp > 65535)
    19c2:	6b a1       	ldd	r22, Y+35	; 0x23
    19c4:	7c a1       	ldd	r23, Y+36	; 0x24
    19c6:	8d a1       	ldd	r24, Y+37	; 0x25
    19c8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <CLCD_voidSendData+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6f a1       	ldd	r22, Y+39	; 0x27
    19dc:	78 a5       	ldd	r23, Y+40	; 0x28
    19de:	89 a5       	ldd	r24, Y+41	; 0x29
    19e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <CLCD_voidSendData+0x62e>
    1a04:	88 ec       	ldi	r24, 0xC8	; 200
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	98 a3       	std	Y+32, r25	; 0x20
    1a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <CLCD_voidSendData+0x61c>
    1a14:	98 a3       	std	Y+32, r25	; 0x20
    1a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	89 a1       	ldd	r24, Y+33	; 0x21
    1a24:	9a a1       	ldd	r25, Y+34	; 0x22
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <CLCD_voidSendData+0x610>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <CLCD_voidSendData+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a3       	std	Y+33, r24	; 0x21
    1a40:	89 a1       	ldd	r24, Y+33	; 0x21
    1a42:	9a a1       	ldd	r25, Y+34	; 0x22
    1a44:	9e 8f       	std	Y+30, r25	; 0x1e
    1a46:	8d 8f       	std	Y+29, r24	; 0x1d
    1a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <CLCD_voidSendData+0x658>
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    1a54:	fe 01       	movw	r30, r28
    1a56:	ed 59       	subi	r30, 0x9D	; 157
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	91 70       	andi	r25, 0x01	; 1
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	49 2f       	mov	r20, r25
    1a66:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 59       	subi	r30, 0x9D	; 157
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	86 95       	lsr	r24
    1a74:	98 2f       	mov	r25, r24
    1a76:	91 70       	andi	r25, 0x01	; 1
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	49 2f       	mov	r20, r25
    1a7e:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 59       	subi	r30, 0x9D	; 157
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	86 95       	lsr	r24
    1a8c:	86 95       	lsr	r24
    1a8e:	98 2f       	mov	r25, r24
    1a90:	91 70       	andi	r25, 0x01	; 1
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	49 2f       	mov	r20, r25
    1a98:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ed 59       	subi	r30, 0x9D	; 157
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	98 2f       	mov	r25, r24
    1aac:	91 70       	andi	r25, 0x01	; 1
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	89 8f       	std	Y+25, r24	; 0x19
    1ac2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8d 8b       	std	Y+21, r24	; 0x15
    1ae2:	9e 8b       	std	Y+22, r25	; 0x16
    1ae4:	af 8b       	std	Y+23, r26	; 0x17
    1ae6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <CLCD_voidSendData+0x716>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <CLCD_voidSendData+0x794>
	else if (__tmp > 65535)
    1b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b10:	98 8d       	ldd	r25, Y+24	; 0x18
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <CLCD_voidSendData+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	69 8d       	ldd	r22, Y+25	; 0x19
    1b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9c 8b       	std	Y+20, r25	; 0x14
    1b48:	8b 8b       	std	Y+19, r24	; 0x13
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <CLCD_voidSendData+0x776>
    1b4c:	88 ec       	ldi	r24, 0xC8	; 200
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9a 8b       	std	Y+18, r25	; 0x12
    1b52:	89 8b       	std	Y+17, r24	; 0x11
    1b54:	89 89       	ldd	r24, Y+17	; 0x11
    1b56:	9a 89       	ldd	r25, Y+18	; 0x12
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <CLCD_voidSendData+0x764>
    1b5c:	9a 8b       	std	Y+18, r25	; 0x12
    1b5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9c 8b       	std	Y+20, r25	; 0x14
    1b68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <CLCD_voidSendData+0x758>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <CLCD_voidSendData+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9c 8b       	std	Y+20, r25	; 0x14
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	98 8b       	std	Y+16, r25	; 0x10
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	98 89       	ldd	r25, Y+16	; 0x10
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <CLCD_voidSendData+0x7a0>
    1b98:	98 8b       	std	Y+16, r25	; 0x10
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	67 e0       	ldi	r22, 0x07	; 7
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	8b 87       	std	Y+11, r24	; 0x0b
    1bb0:	9c 87       	std	Y+12, r25	; 0x0c
    1bb2:	ad 87       	std	Y+13, r26	; 0x0d
    1bb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a ef       	ldi	r20, 0xFA	; 250
    1bc4:	54 e4       	ldi	r21, 0x44	; 68
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	8f 83       	std	Y+7, r24	; 0x07
    1bd0:	98 87       	std	Y+8, r25	; 0x08
    1bd2:	a9 87       	std	Y+9, r26	; 0x09
    1bd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <CLCD_voidSendData+0x804>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <CLCD_voidSendData+0x882>
	else if (__tmp > 65535)
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <CLCD_voidSendData+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <CLCD_voidSendData+0x864>
    1c3a:	88 ec       	ldi	r24, 0xC8	; 200
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <CLCD_voidSendData+0x852>
    1c4a:	9c 83       	std	Y+4, r25	; 0x04
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <CLCD_voidSendData+0x846>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <CLCD_voidSendData+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <CLCD_voidSendData+0x88e>
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c8a:	cd 59       	subi	r28, 0x9D	; 157
    1c8c:	df 4f       	sbci	r29, 0xFF	; 255
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	2e 97       	sbiw	r28, 0x0e	; 14
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	67 e0       	ldi	r22, 0x07	; 7
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 ea       	ldi	r26, 0xA0	; 160
    1cda:	b1 e4       	ldi	r27, 0x41	; 65
    1cdc:	8b 87       	std	Y+11, r24	; 0x0b
    1cde:	9c 87       	std	Y+12, r25	; 0x0c
    1ce0:	ad 87       	std	Y+13, r26	; 0x0d
    1ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a ef       	ldi	r20, 0xFA	; 250
    1cf2:	54 e4       	ldi	r21, 0x44	; 68
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8f 83       	std	Y+7, r24	; 0x07
    1cfe:	98 87       	std	Y+8, r25	; 0x08
    1d00:	a9 87       	std	Y+9, r26	; 0x09
    1d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <CLCD_voidInit+0x84>
		__ticks = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	3f c0       	rjmp	.+126    	; 0x1da4 <CLCD_voidInit+0x102>
	else if (__tmp > 65535)
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3a:	18 16       	cp	r1, r24
    1d3c:	4c f5       	brge	.+82     	; 0x1d90 <CLCD_voidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <CLCD_voidInit+0xe4>
    1d68:	88 ec       	ldi	r24, 0xC8	; 200
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <CLCD_voidInit+0xd2>
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	69 f7       	brne	.-38     	; 0x1d68 <CLCD_voidInit+0xc6>
    1d8e:	14 c0       	rjmp	.+40     	; 0x1db8 <CLCD_voidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <CLCD_voidInit+0x10e>
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if (CLCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D4_PIN,DIO_u8PIN_OUTPUT);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D5_PIN,DIO_u8PIN_OUTPUT);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D6_PIN,DIO_u8PIN_OUTPUT);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D7_PIN,DIO_u8PIN_OUTPUT);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	63 e0       	ldi	r22, 0x03	; 3
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1de0:	83 e3       	ldi	r24, 0x33	; 51
    1de2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1de6:	82 e3       	ldi	r24, 0x32	; 50
    1de8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1dec:	88 e2       	ldi	r24, 0x28	; 40
    1dee:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

	CLCD_voidSendCommand(LCD_CURSOR_OFF);    /* cursor off */
    1df2:	8c e0       	ldi	r24, 0x0C	; 12
    1df4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1dfe:	2e 96       	adiw	r28, 0x0e	; 14
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <CLCD_voidSendString+0x6>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	80 81       	ld	r24, Z
    1e36:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
		Local_u8Counter++;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	80 81       	ld	r24, Z
    1e52:	88 23       	and	r24, r24
    1e54:	39 f7       	brne	.-50     	; 0x1e24 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <CLCD_voidGoToXY+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <CLCD_voidGoToXY+0x8>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8XPos) {
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	3c 83       	std	Y+4, r19	; 0x04
    1e7a:	2b 83       	std	Y+3, r18	; 0x03
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	d1 f0       	breq	.+52     	; 0x1eba <CLCD_voidGoToXY+0x58>
    1e86:	2b 81       	ldd	r18, Y+3	; 0x03
    1e88:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <CLCD_voidGoToXY+0x38>
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <CLCD_voidGoToXY+0x4e>
    1e98:	1d c0       	rjmp	.+58     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <CLCD_voidGoToXY+0x62>
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	79 f0       	breq	.+30     	; 0x1ecc <CLCD_voidGoToXY+0x6a>
    1eae:	12 c0       	rjmp	.+36     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
	case 0:
		CLCD_voidSendCommand(128 + Copy_u8YPos);
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	80 58       	subi	r24, 0x80	; 128
    1eb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
		break;
	case 1:
		CLCD_voidSendCommand(192 + Copy_u8YPos);
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	80 54       	subi	r24, 0x40	; 64
    1ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
		break;
	case 2:
		CLCD_voidSendCommand(256 + Copy_u8YPos);
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <CLCD_voidGoToXY+0x72>
		break;
	case 3:
		CLCD_voidSendCommand(320 + Copy_u8YPos);
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	80 5c       	subi	r24, 0xC0	; 192
    1ed0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	default:
		//
		break;

	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <CLCD_voidSendStringGoToXY>:

void CLCD_voidSendStringGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos,const char* Copy_pcString)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <CLCD_voidSendStringGoToXY+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <CLCD_voidSendStringGoToXY+0x8>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	6a 83       	std	Y+2, r22	; 0x02
    1ef2:	5c 83       	std	Y+4, r21	; 0x04
    1ef4:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    1efa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_pcString);
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>


}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	27 97       	sbiw	r28, 0x07	; 7
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	6d 83       	std	Y+5, r22	; 0x05
    1f2e:	4e 83       	std	Y+6, r20	; 0x06
    1f30:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    1f32:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	u8SateSpecialCharIndx = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 c8 00 	sts	0x00C8, r24

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	80 5c       	subi	r24, 0xC0	; 192
    1f52:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <CLCD_voidWriteSpecialCharacter+0x62>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	fc 01       	movw	r30, r24
    1f66:	e2 0f       	add	r30, r18
    1f68:	f3 1f       	adc	r31, r19
    1f6a:	80 81       	ld	r24, Z
    1f6c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
	u8SateSpecialCharIndx = 1;

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	8f 5f       	subi	r24, 0xFF	; 255
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	78 f3       	brcs	.-34     	; 0x1f5a <CLCD_voidWriteSpecialCharacter+0x46>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos , Copy_u8YPos);
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f80:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
	u8SateSpecialCharIndx = 0;
    1f8a:	10 92 c8 00 	sts	0x00C8, r1
}
    1f8e:	27 96       	adiw	r28, 0x07	; 7
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	61 97       	sbiw	r28, 0x11	; 17
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	6e 87       	std	Y+14, r22	; 0x0e
    1fb6:	7f 87       	std	Y+15, r23	; 0x0f
    1fb8:	88 8b       	std	Y+16, r24	; 0x10
    1fba:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8DigitNumber;
	s8 Local_s8Counter = -1 , Local_s8Iterator;
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[CLCD_SIZE_OF_ARRAY];
	do
	{
		Local_s8Counter++;
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DigitNumber = Copy_u32Number % 10;
    1fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fca:	a8 89       	ldd	r26, Y+16	; 0x10
    1fcc:	b9 89       	ldd	r27, Y+17	; 0x11
    1fce:	2a e0       	ldi	r18, 0x0A	; 10
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__udivmodsi4>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	33 27       	eor	r19, r19
    1fea:	27 fd       	sbrc	r18, 7
    1fec:	30 95       	com	r19
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	40 5d       	subi	r20, 0xD0	; 208
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	04 96       	adiw	r24, 0x04	; 4
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    2000:	8e 85       	ldd	r24, Y+14	; 0x0e
    2002:	9f 85       	ldd	r25, Y+15	; 0x0f
    2004:	a8 89       	ldd	r26, Y+16	; 0x10
    2006:	b9 89       	ldd	r27, Y+17	; 0x11
    2008:	2a e0       	ldi	r18, 0x0A	; 10
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__udivmodsi4>
    2018:	da 01       	movw	r26, r20
    201a:	c9 01       	movw	r24, r18
    201c:	8e 87       	std	Y+14, r24	; 0x0e
    201e:	9f 87       	std	Y+15, r25	; 0x0f
    2020:	a8 8b       	std	Y+16, r26	; 0x10
    2022:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Copy_u32Number != 0);
    2024:	8e 85       	ldd	r24, Y+14	; 0x0e
    2026:	9f 85       	ldd	r25, Y+15	; 0x0f
    2028:	a8 89       	ldd	r26, Y+16	; 0x10
    202a:	b9 89       	ldd	r27, Y+17	; 0x11
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	a1 05       	cpc	r26, r1
    2030:	b1 05       	cpc	r27, r1
    2032:	31 f6       	brne	.-116    	; 0x1fc0 <CLCD_voidSendNumber+0x20>
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	10 c0       	rjmp	.+32     	; 0x205a <CLCD_voidSendNumber+0xba>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	33 27       	eor	r19, r19
    2040:	27 fd       	sbrc	r18, 7
    2042:	30 95       	com	r19
    2044:	ce 01       	movw	r24, r28
    2046:	04 96       	adiw	r24, 0x04	; 4
    2048:	fc 01       	movw	r30, r24
    204a:	e2 0f       	add	r30, r18
    204c:	f3 1f       	adc	r31, r19
    204e:	80 81       	ld	r24, Z
    2050:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
		Local_s8Counter++;
		Local_u8DigitNumber = Copy_u32Number % 10;
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
		Copy_u32Number /= 10;
	}while(Copy_u32Number != 0);
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	81 50       	subi	r24, 0x01	; 1
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	88 23       	and	r24, r24
    205e:	6c f7       	brge	.-38     	; 0x203a <CLCD_voidSendNumber+0x9a>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
	}
}
    2060:	61 96       	adiw	r28, 0x11	; 17
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <CLCD_voidIntegerToString>:

void CLCD_voidIntegerToString (u8 value)	// Display certain integer value on screen
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	61 97       	sbiw	r28, 0x11	; 17
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	89 8b       	std	Y+17, r24	; 0x11
	u8 number_str[16];
	itoa(value, number_str, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 01       	movw	r18, r28
    2090:	2f 5f       	subi	r18, 0xFF	; 255
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	b9 01       	movw	r22, r18
    2096:	4a e0       	ldi	r20, 0x0A	; 10
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <itoa>
	CLCD_voidSendString(number_str);
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
}
    20a6:	61 96       	adiw	r28, 0x11	; 17
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen (void)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <DCM_voidInit>:
#include "DCM_interface.h"
#include "DCM_private.h"


void DCM_voidInit(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	/* Set The DC motor pins an output pins */
	DIO_u8SetPinDirection(DCM_PORT,DCM_PIN0,DIO_u8PIN_OUTPUT);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DCM_PORT,DCM_PIN1,DIO_u8PIN_OUTPUT);
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DCM_PORT,PWM_PIN,DIO_u8PIN_OUTPUT);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>

	/* Set initial value zero for The Dc motor */
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>

	/* Initial the time FAST PWM with Prescaler F_CPU_8 */
}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <DCM_voidCW>:

void DCM_voidCW(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_HIGH);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <DCM_voidCCW>:


void DCM_voidCCW(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_HIGH);
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <DCM_voidRotate>:

void DCM_voidRotate( u8 Local_u8State )
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	0f 92       	push	r0
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	89 83       	std	Y+1, r24	; 0x01
	 /* Choose DC motor movement */
	if(Local_u8State == CW_STATE)
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	59 f4       	brne	.+22     	; 0x2178 <DCM_voidRotate+0x28>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_HIGH);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    2176:	1b c0       	rjmp	.+54     	; 0x21ae <DCM_voidRotate+0x5e>
	}
	else if(Local_u8State == CWW_STATE)
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	82 30       	cpi	r24, 0x02	; 2
    217c:	59 f4       	brne	.+22     	; 0x2194 <DCM_voidRotate+0x44>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_HIGH);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
    2192:	0d c0       	rjmp	.+26     	; 0x21ae <DCM_voidRotate+0x5e>
	}
	else if(Local_u8State == STOP_STATE)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	83 30       	cpi	r24, 0x03	; 3
    2198:	51 f4       	brne	.+20     	; 0x21ae <DCM_voidRotate+0x5e>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	}
}
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <LDelay_voidDelay_ms>:
 * Description : create time delay in milliseconds
 * Arguments   : time in milliseconds                   
 * return      : void  
 */
void LDelay_voidDelay_ms(u32 Copy_u32Time_ms)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	2c 97       	sbiw	r28, 0x0c	; 12
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	69 87       	std	Y+9, r22	; 0x09
    21cc:	7a 87       	std	Y+10, r23	; 0x0a
    21ce:	8b 87       	std	Y+11, r24	; 0x0b
    21d0:	9c 87       	std	Y+12, r25	; 0x0c
	/*calculate net time(minus time spent in calculation processing)*/
	Copy_u32Time_ms = (Copy_u32Time_ms * 100000)-(LDELAY_CalculationTime + LDELAY_ContextSwitch);
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    21d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    21da:	20 ea       	ldi	r18, 0xA0	; 160
    21dc:	36 e8       	ldi	r19, 0x86	; 134
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__mulsi3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	86 56       	subi	r24, 0x66	; 102
    21f0:	99 40       	sbci	r25, 0x09	; 9
    21f2:	a0 40       	sbci	r26, 0x00	; 0
    21f4:	b0 40       	sbci	r27, 0x00	; 0
    21f6:	89 87       	std	Y+9, r24	; 0x09
    21f8:	9a 87       	std	Y+10, r25	; 0x0a
    21fa:	ab 87       	std	Y+11, r26	; 0x0b
    21fc:	bc 87       	std	Y+12, r27	; 0x0c
	/*calculate number of iterations in busy loop*/
	u32 Local_u32NoLoops = Copy_u32Time_ms/LDELAY_LoopTime;
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	ab 85       	ldd	r26, Y+11	; 0x0b
    2204:	bc 85       	ldd	r27, Y+12	; 0x0c
    2206:	29 e8       	ldi	r18, 0x89	; 137
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__udivmodsi4>
    2216:	da 01       	movw	r26, r20
    2218:	c9 01       	movw	r24, r18
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	af 83       	std	Y+7, r26	; 0x07
    2220:	b8 87       	std	Y+8, r27	; 0x08
	
	/*crate busy loop*/
	for(u32 i=0;i<Local_u32NoLoops;i++)
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	1a 82       	std	Y+2, r1	; 0x02
    2226:	1b 82       	std	Y+3, r1	; 0x03
    2228:	1c 82       	std	Y+4, r1	; 0x04
    222a:	0c c0       	rjmp	.+24     	; 0x2244 <LDelay_voidDelay_ms+0x8e>
	{
		/*no operation assembly line*/
		asm("NOP");
    222c:	00 00       	nop
	Copy_u32Time_ms = (Copy_u32Time_ms * 100000)-(LDELAY_CalculationTime + LDELAY_ContextSwitch);
	/*calculate number of iterations in busy loop*/
	u32 Local_u32NoLoops = Copy_u32Time_ms/LDELAY_LoopTime;
	
	/*crate busy loop*/
	for(u32 i=0;i<Local_u32NoLoops;i++)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	ab 81       	ldd	r26, Y+3	; 0x03
    2234:	bc 81       	ldd	r27, Y+4	; 0x04
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	a1 1d       	adc	r26, r1
    223a:	b1 1d       	adc	r27, r1
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	ab 83       	std	Y+3, r26	; 0x03
    2242:	bc 83       	std	Y+4, r27	; 0x04
    2244:	29 81       	ldd	r18, Y+1	; 0x01
    2246:	3a 81       	ldd	r19, Y+2	; 0x02
    2248:	4b 81       	ldd	r20, Y+3	; 0x03
    224a:	5c 81       	ldd	r21, Y+4	; 0x04
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	af 81       	ldd	r26, Y+7	; 0x07
    2252:	b8 85       	ldd	r27, Y+8	; 0x08
    2254:	28 17       	cp	r18, r24
    2256:	39 07       	cpc	r19, r25
    2258:	4a 07       	cpc	r20, r26
    225a:	5b 07       	cpc	r21, r27
    225c:	38 f3       	brcs	.-50     	; 0x222c <LDelay_voidDelay_ms+0x76>
	{
		/*no operation assembly line*/
		asm("NOP");
	}/*end of busy loop*/
	
}/*end of LDelay_voidDelay_ms()*/
    225e:	2c 96       	adiw	r28, 0x0c	; 12
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <LDelay_voidDelay_us>:
 * Description : create time delay in microseconds
 * Arguments   : time in microseconds                   
 * return      : void  
 */
void LDelay_voidDelay_us(u32 Copy_u32Time_us)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	2c 97       	sbiw	r28, 0x0c	; 12
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	69 87       	std	Y+9, r22	; 0x09
    2286:	7a 87       	std	Y+10, r23	; 0x0a
    2288:	8b 87       	std	Y+11, r24	; 0x0b
    228a:	9c 87       	std	Y+12, r25	; 0x0c
	/*calculate net time(minus time spent in calculation processing)*/
	Copy_u32Time_us = (Copy_u32Time_us * 100) - LDELAY_CalculationTime - LDELAY_ContextSwitch;
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	ab 85       	ldd	r26, Y+11	; 0x0b
    2292:	bc 85       	ldd	r27, Y+12	; 0x0c
    2294:	24 e6       	ldi	r18, 0x64	; 100
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__mulsi3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	86 56       	subi	r24, 0x66	; 102
    22aa:	99 40       	sbci	r25, 0x09	; 9
    22ac:	a0 40       	sbci	r26, 0x00	; 0
    22ae:	b0 40       	sbci	r27, 0x00	; 0
    22b0:	89 87       	std	Y+9, r24	; 0x09
    22b2:	9a 87       	std	Y+10, r25	; 0x0a
    22b4:	ab 87       	std	Y+11, r26	; 0x0b
    22b6:	bc 87       	std	Y+12, r27	; 0x0c
	/*calculate number of iterations in busy loop*/
	u32 Local_u32NoLoops = Copy_u32Time_us / LDELAY_LoopTime;
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    22be:	bc 85       	ldd	r27, Y+12	; 0x0c
    22c0:	29 e8       	ldi	r18, 0x89	; 137
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__udivmodsi4>
    22d0:	da 01       	movw	r26, r20
    22d2:	c9 01       	movw	r24, r18
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	af 83       	std	Y+7, r26	; 0x07
    22da:	b8 87       	std	Y+8, r27	; 0x08
	/*crate busy loop*/
	for(u32 i=0;i<Local_u32NoLoops;i++)
    22dc:	19 82       	std	Y+1, r1	; 0x01
    22de:	1a 82       	std	Y+2, r1	; 0x02
    22e0:	1b 82       	std	Y+3, r1	; 0x03
    22e2:	1c 82       	std	Y+4, r1	; 0x04
    22e4:	0c c0       	rjmp	.+24     	; 0x22fe <LDelay_voidDelay_us+0x8e>
	{
		/*no operation assembly line*/
		asm("NOP");
    22e6:	00 00       	nop
	/*calculate net time(minus time spent in calculation processing)*/
	Copy_u32Time_us = (Copy_u32Time_us * 100) - LDELAY_CalculationTime - LDELAY_ContextSwitch;
	/*calculate number of iterations in busy loop*/
	u32 Local_u32NoLoops = Copy_u32Time_us / LDELAY_LoopTime;
	/*crate busy loop*/
	for(u32 i=0;i<Local_u32NoLoops;i++)
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	ab 81       	ldd	r26, Y+3	; 0x03
    22ee:	bc 81       	ldd	r27, Y+4	; 0x04
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	a1 1d       	adc	r26, r1
    22f4:	b1 1d       	adc	r27, r1
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	ab 83       	std	Y+3, r26	; 0x03
    22fc:	bc 83       	std	Y+4, r27	; 0x04
    22fe:	29 81       	ldd	r18, Y+1	; 0x01
    2300:	3a 81       	ldd	r19, Y+2	; 0x02
    2302:	4b 81       	ldd	r20, Y+3	; 0x03
    2304:	5c 81       	ldd	r21, Y+4	; 0x04
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	af 81       	ldd	r26, Y+7	; 0x07
    230c:	b8 85       	ldd	r27, Y+8	; 0x08
    230e:	28 17       	cp	r18, r24
    2310:	39 07       	cpc	r19, r25
    2312:	4a 07       	cpc	r20, r26
    2314:	5b 07       	cpc	r21, r27
    2316:	38 f3       	brcs	.-50     	; 0x22e6 <LDelay_voidDelay_us+0x76>
		/*no operation assembly line*/
		asm("NOP");
		
	}/*end of LDelay_voidDelay_us()*/
	
}/*end of LDelay_voidDelay_us()*/
    2318:	2c 96       	adiw	r28, 0x0c	; 12
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62

}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	2a 97       	sbiw	r28, 0x0a	; 10
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	6b 83       	std	Y+3, r22	; 0x03
    2350:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2352:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	88 30       	cpi	r24, 0x08	; 8
    2358:	08 f0       	brcs	.+2      	; 0x235c <DIO_u8SetPinDirection+0x24>
    235a:	b9 c1       	rjmp	.+882    	; 0x26ce <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	88 23       	and	r24, r24
    2360:	09 f0       	breq	.+2      	; 0x2364 <DIO_u8SetPinDirection+0x2c>
    2362:	77 c0       	rjmp	.+238    	; 0x2452 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3a 87       	std	Y+10, r19	; 0x0a
    236c:	29 87       	std	Y+9, r18	; 0x09
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	59 f1       	breq	.+86     	; 0x23ce <DIO_u8SetPinDirection+0x96>
    2378:	29 85       	ldd	r18, Y+9	; 0x09
    237a:	3a 85       	ldd	r19, Y+10	; 0x0a
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	2c f4       	brge	.+10     	; 0x238c <DIO_u8SetPinDirection+0x54>
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	69 f0       	breq	.+26     	; 0x23a4 <DIO_u8SetPinDirection+0x6c>
    238a:	60 c0       	rjmp	.+192    	; 0x244c <DIO_u8SetPinDirection+0x114>
    238c:	29 85       	ldd	r18, Y+9	; 0x09
    238e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	89 f1       	breq	.+98     	; 0x23f8 <DIO_u8SetPinDirection+0xc0>
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	09 f4       	brne	.+2      	; 0x23a2 <DIO_u8SetPinDirection+0x6a>
    23a0:	40 c0       	rjmp	.+128    	; 0x2422 <DIO_u8SetPinDirection+0xea>
    23a2:	54 c0       	rjmp	.+168    	; 0x244c <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    23a4:	aa e3       	ldi	r26, 0x3A	; 58
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	ea e3       	ldi	r30, 0x3A	; 58
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 2e       	mov	r0, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <DIO_u8SetPinDirection+0x8a>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <DIO_u8SetPinDirection+0x86>
    23c6:	80 95       	com	r24
    23c8:	84 23       	and	r24, r20
    23ca:	8c 93       	st	X, r24
    23cc:	82 c1       	rjmp	.+772    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    23ce:	a7 e3       	ldi	r26, 0x37	; 55
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e7 e3       	ldi	r30, 0x37	; 55
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	48 2f       	mov	r20, r24
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 2e       	mov	r0, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_u8SetPinDirection+0xb4>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	0a 94       	dec	r0
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <DIO_u8SetPinDirection+0xb0>
    23f0:	80 95       	com	r24
    23f2:	84 23       	and	r24, r20
    23f4:	8c 93       	st	X, r24
    23f6:	6d c1       	rjmp	.+730    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    23f8:	a4 e3       	ldi	r26, 0x34	; 52
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e4 e3       	ldi	r30, 0x34	; 52
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	48 2f       	mov	r20, r24
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 2e       	mov	r0, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_u8SetPinDirection+0xde>
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	0a 94       	dec	r0
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <DIO_u8SetPinDirection+0xda>
    241a:	80 95       	com	r24
    241c:	84 23       	and	r24, r20
    241e:	8c 93       	st	X, r24
    2420:	58 c1       	rjmp	.+688    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    2422:	a1 e3       	ldi	r26, 0x31	; 49
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e1 e3       	ldi	r30, 0x31	; 49
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	48 2f       	mov	r20, r24
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 2e       	mov	r0, r18
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <DIO_u8SetPinDirection+0x108>
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	0a 94       	dec	r0
    2442:	e2 f7       	brpl	.-8      	; 0x243c <DIO_u8SetPinDirection+0x104>
    2444:	80 95       	com	r24
    2446:	84 23       	and	r24, r20
    2448:	8c 93       	st	X, r24
    244a:	43 c1       	rjmp	.+646    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	40 c1       	rjmp	.+640    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	09 f0       	breq	.+2      	; 0x245a <DIO_u8SetPinDirection+0x122>
    2458:	72 c0       	rjmp	.+228    	; 0x253e <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	38 87       	std	Y+8, r19	; 0x08
    2462:	2f 83       	std	Y+7, r18	; 0x07
    2464:	8f 81       	ldd	r24, Y+7	; 0x07
    2466:	98 85       	ldd	r25, Y+8	; 0x08
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	49 f1       	breq	.+82     	; 0x24c0 <DIO_u8SetPinDirection+0x188>
    246e:	2f 81       	ldd	r18, Y+7	; 0x07
    2470:	38 85       	ldd	r19, Y+8	; 0x08
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	2c f4       	brge	.+10     	; 0x2482 <DIO_u8SetPinDirection+0x14a>
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	98 85       	ldd	r25, Y+8	; 0x08
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	61 f0       	breq	.+24     	; 0x2498 <DIO_u8SetPinDirection+0x160>
    2480:	5b c0       	rjmp	.+182    	; 0x2538 <DIO_u8SetPinDirection+0x200>
    2482:	2f 81       	ldd	r18, Y+7	; 0x07
    2484:	38 85       	ldd	r19, Y+8	; 0x08
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	31 05       	cpc	r19, r1
    248a:	71 f1       	breq	.+92     	; 0x24e8 <DIO_u8SetPinDirection+0x1b0>
    248c:	8f 81       	ldd	r24, Y+7	; 0x07
    248e:	98 85       	ldd	r25, Y+8	; 0x08
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	91 05       	cpc	r25, r1
    2494:	e9 f1       	breq	.+122    	; 0x2510 <DIO_u8SetPinDirection+0x1d8>
    2496:	50 c0       	rjmp	.+160    	; 0x2538 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    2498:	aa e3       	ldi	r26, 0x3A	; 58
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	ea e3       	ldi	r30, 0x3A	; 58
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	48 2f       	mov	r20, r24
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	02 2e       	mov	r0, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <DIO_u8SetPinDirection+0x17e>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <DIO_u8SetPinDirection+0x17a>
    24ba:	84 2b       	or	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	09 c1       	rjmp	.+530    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    24c0:	a7 e3       	ldi	r26, 0x37	; 55
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e7 e3       	ldi	r30, 0x37	; 55
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_u8SetPinDirection+0x1a6>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <DIO_u8SetPinDirection+0x1a2>
    24e2:	84 2b       	or	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	f5 c0       	rjmp	.+490    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    24e8:	a4 e3       	ldi	r26, 0x34	; 52
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e4 e3       	ldi	r30, 0x34	; 52
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <DIO_u8SetPinDirection+0x1ce>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <DIO_u8SetPinDirection+0x1ca>
    250a:	84 2b       	or	r24, r20
    250c:	8c 93       	st	X, r24
    250e:	e1 c0       	rjmp	.+450    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    2510:	a1 e3       	ldi	r26, 0x31	; 49
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e1 e3       	ldi	r30, 0x31	; 49
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	48 2f       	mov	r20, r24
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 2e       	mov	r0, r18
    2528:	02 c0       	rjmp	.+4      	; 0x252e <DIO_u8SetPinDirection+0x1f6>
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	0a 94       	dec	r0
    2530:	e2 f7       	brpl	.-8      	; 0x252a <DIO_u8SetPinDirection+0x1f2>
    2532:	84 2b       	or	r24, r20
    2534:	8c 93       	st	X, r24
    2536:	cd c0       	rjmp	.+410    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	ca c0       	rjmp	.+404    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	82 30       	cpi	r24, 0x02	; 2
    2542:	09 f0       	breq	.+2      	; 0x2546 <DIO_u8SetPinDirection+0x20e>
    2544:	c1 c0       	rjmp	.+386    	; 0x26c8 <DIO_u8SetPinDirection+0x390>
		{
			switch(Copy_u8Port)
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	3e 83       	std	Y+6, r19	; 0x06
    254e:	2d 83       	std	Y+5, r18	; 0x05
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	91 05       	cpc	r25, r1
    2558:	09 f4       	brne	.+2      	; 0x255c <DIO_u8SetPinDirection+0x224>
    255a:	3e c0       	rjmp	.+124    	; 0x25d8 <DIO_u8SetPinDirection+0x2a0>
    255c:	2d 81       	ldd	r18, Y+5	; 0x05
    255e:	3e 81       	ldd	r19, Y+6	; 0x06
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	2c f4       	brge	.+10     	; 0x2570 <DIO_u8SetPinDirection+0x238>
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	71 f0       	breq	.+28     	; 0x258a <DIO_u8SetPinDirection+0x252>
    256e:	a9 c0       	rjmp	.+338    	; 0x26c2 <DIO_u8SetPinDirection+0x38a>
    2570:	2d 81       	ldd	r18, Y+5	; 0x05
    2572:	3e 81       	ldd	r19, Y+6	; 0x06
    2574:	22 30       	cpi	r18, 0x02	; 2
    2576:	31 05       	cpc	r19, r1
    2578:	09 f4       	brne	.+2      	; 0x257c <DIO_u8SetPinDirection+0x244>
    257a:	55 c0       	rjmp	.+170    	; 0x2626 <DIO_u8SetPinDirection+0x2ee>
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	83 30       	cpi	r24, 0x03	; 3
    2582:	91 05       	cpc	r25, r1
    2584:	09 f4       	brne	.+2      	; 0x2588 <DIO_u8SetPinDirection+0x250>
    2586:	76 c0       	rjmp	.+236    	; 0x2674 <DIO_u8SetPinDirection+0x33c>
    2588:	9c c0       	rjmp	.+312    	; 0x26c2 <DIO_u8SetPinDirection+0x38a>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    258a:	aa e3       	ldi	r26, 0x3A	; 58
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	ea e3       	ldi	r30, 0x3A	; 58
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	48 2f       	mov	r20, r24
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_u8SetPinDirection+0x26e>
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	2a 95       	dec	r18
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_u8SetPinDirection+0x26a>
    25aa:	80 95       	com	r24
    25ac:	84 23       	and	r24, r20
    25ae:	8c 93       	st	X, r24
    25b0:	ab e3       	ldi	r26, 0x3B	; 59
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	eb e3       	ldi	r30, 0x3B	; 59
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	48 2f       	mov	r20, r24
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	02 2e       	mov	r0, r18
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <DIO_u8SetPinDirection+0x296>
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	0a 94       	dec	r0
    25d0:	e2 f7       	brpl	.-8      	; 0x25ca <DIO_u8SetPinDirection+0x292>
    25d2:	84 2b       	or	r24, r20
    25d4:	8c 93       	st	X, r24
    25d6:	7d c0       	rjmp	.+250    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    25d8:	a7 e3       	ldi	r26, 0x37	; 55
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e7 e3       	ldi	r30, 0x37	; 55
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	48 2f       	mov	r20, r24
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_u8SetPinDirection+0x2bc>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	2a 95       	dec	r18
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <DIO_u8SetPinDirection+0x2b8>
    25f8:	80 95       	com	r24
    25fa:	84 23       	and	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	a8 e3       	ldi	r26, 0x38	; 56
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e8 e3       	ldi	r30, 0x38	; 56
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	48 2f       	mov	r20, r24
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	02 2e       	mov	r0, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <DIO_u8SetPinDirection+0x2e4>
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	0a 94       	dec	r0
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <DIO_u8SetPinDirection+0x2e0>
    2620:	84 2b       	or	r24, r20
    2622:	8c 93       	st	X, r24
    2624:	56 c0       	rjmp	.+172    	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    2626:	a4 e3       	ldi	r26, 0x34	; 52
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e4 e3       	ldi	r30, 0x34	; 52
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	48 2f       	mov	r20, r24
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <DIO_u8SetPinDirection+0x30a>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	2a 95       	dec	r18
    2644:	e2 f7       	brpl	.-8      	; 0x263e <DIO_u8SetPinDirection+0x306>
    2646:	80 95       	com	r24
    2648:	84 23       	and	r24, r20
    264a:	8c 93       	st	X, r24
    264c:	a5 e3       	ldi	r26, 0x35	; 53
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e5 e3       	ldi	r30, 0x35	; 53
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	48 2f       	mov	r20, r24
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	02 2e       	mov	r0, r18
    2664:	02 c0       	rjmp	.+4      	; 0x266a <DIO_u8SetPinDirection+0x332>
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	0a 94       	dec	r0
    266c:	e2 f7       	brpl	.-8      	; 0x2666 <DIO_u8SetPinDirection+0x32e>
    266e:	84 2b       	or	r24, r20
    2670:	8c 93       	st	X, r24
    2672:	2f c0       	rjmp	.+94     	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    2674:	a1 e3       	ldi	r26, 0x31	; 49
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e1 e3       	ldi	r30, 0x31	; 49
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	48 2f       	mov	r20, r24
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <DIO_u8SetPinDirection+0x358>
    268c:	88 0f       	add	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	2a 95       	dec	r18
    2692:	e2 f7       	brpl	.-8      	; 0x268c <DIO_u8SetPinDirection+0x354>
    2694:	80 95       	com	r24
    2696:	84 23       	and	r24, r20
    2698:	8c 93       	st	X, r24
    269a:	a2 e3       	ldi	r26, 0x32	; 50
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e2 e3       	ldi	r30, 0x32	; 50
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	48 2f       	mov	r20, r24
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	02 2e       	mov	r0, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <DIO_u8SetPinDirection+0x380>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	0a 94       	dec	r0
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <DIO_u8SetPinDirection+0x37c>
    26bc:	84 2b       	or	r24, r20
    26be:	8c 93       	st	X, r24
    26c0:	08 c0       	rjmp	.+16     	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	05 c0       	rjmp	.+10     	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d4:	2a 96       	adiw	r28, 0x0a	; 10
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <DIO_u8SetPortDirection+0x6>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <DIO_u8SetPortDirection+0x8>
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	8a 83       	std	Y+2, r24	; 0x02
    26f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    26f8:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	3d 83       	std	Y+5, r19	; 0x05
    2702:	2c 83       	std	Y+4, r18	; 0x04
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	9d 81       	ldd	r25, Y+5	; 0x05
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	91 05       	cpc	r25, r1
    270c:	d1 f0       	breq	.+52     	; 0x2742 <DIO_u8SetPortDirection+0x5c>
    270e:	2c 81       	ldd	r18, Y+4	; 0x04
    2710:	3d 81       	ldd	r19, Y+5	; 0x05
    2712:	22 30       	cpi	r18, 0x02	; 2
    2714:	31 05       	cpc	r19, r1
    2716:	2c f4       	brge	.+10     	; 0x2722 <DIO_u8SetPortDirection+0x3c>
    2718:	8c 81       	ldd	r24, Y+4	; 0x04
    271a:	9d 81       	ldd	r25, Y+5	; 0x05
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	61 f0       	breq	.+24     	; 0x2738 <DIO_u8SetPortDirection+0x52>
    2720:	1f c0       	rjmp	.+62     	; 0x2760 <DIO_u8SetPortDirection+0x7a>
    2722:	2c 81       	ldd	r18, Y+4	; 0x04
    2724:	3d 81       	ldd	r19, Y+5	; 0x05
    2726:	22 30       	cpi	r18, 0x02	; 2
    2728:	31 05       	cpc	r19, r1
    272a:	81 f0       	breq	.+32     	; 0x274c <DIO_u8SetPortDirection+0x66>
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	83 30       	cpi	r24, 0x03	; 3
    2732:	91 05       	cpc	r25, r1
    2734:	81 f0       	breq	.+32     	; 0x2756 <DIO_u8SetPortDirection+0x70>
    2736:	14 c0       	rjmp	.+40     	; 0x2760 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    2738:	ea e3       	ldi	r30, 0x3A	; 58
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	80 83       	st	Z, r24
    2740:	11 c0       	rjmp	.+34     	; 0x2764 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    2742:	e7 e3       	ldi	r30, 0x37	; 55
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	80 83       	st	Z, r24
    274a:	0c c0       	rjmp	.+24     	; 0x2764 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    274c:	e4 e3       	ldi	r30, 0x34	; 52
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	80 83       	st	Z, r24
    2754:	07 c0       	rjmp	.+14     	; 0x2764 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    2756:	e1 e3       	ldi	r30, 0x31	; 49
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	80 83       	st	Z, r24
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2764:	89 81       	ldd	r24, Y+1	; 0x01
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	28 97       	sbiw	r28, 0x08	; 8
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	8a 83       	std	Y+2, r24	; 0x02
    278c:	6b 83       	std	Y+3, r22	; 0x03
    278e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2790:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	88 30       	cpi	r24, 0x08	; 8
    2796:	08 f0       	brcs	.+2      	; 0x279a <DIO_u8SetPinValue+0x24>
    2798:	f4 c0       	rjmp	.+488    	; 0x2982 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    279a:	8c 81       	ldd	r24, Y+4	; 0x04
    279c:	88 23       	and	r24, r24
    279e:	09 f0       	breq	.+2      	; 0x27a2 <DIO_u8SetPinValue+0x2c>
    27a0:	77 c0       	rjmp	.+238    	; 0x2890 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	38 87       	std	Y+8, r19	; 0x08
    27aa:	2f 83       	std	Y+7, r18	; 0x07
    27ac:	8f 81       	ldd	r24, Y+7	; 0x07
    27ae:	98 85       	ldd	r25, Y+8	; 0x08
    27b0:	81 30       	cpi	r24, 0x01	; 1
    27b2:	91 05       	cpc	r25, r1
    27b4:	59 f1       	breq	.+86     	; 0x280c <DIO_u8SetPinValue+0x96>
    27b6:	2f 81       	ldd	r18, Y+7	; 0x07
    27b8:	38 85       	ldd	r19, Y+8	; 0x08
    27ba:	22 30       	cpi	r18, 0x02	; 2
    27bc:	31 05       	cpc	r19, r1
    27be:	2c f4       	brge	.+10     	; 0x27ca <DIO_u8SetPinValue+0x54>
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	98 85       	ldd	r25, Y+8	; 0x08
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	69 f0       	breq	.+26     	; 0x27e2 <DIO_u8SetPinValue+0x6c>
    27c8:	60 c0       	rjmp	.+192    	; 0x288a <DIO_u8SetPinValue+0x114>
    27ca:	2f 81       	ldd	r18, Y+7	; 0x07
    27cc:	38 85       	ldd	r19, Y+8	; 0x08
    27ce:	22 30       	cpi	r18, 0x02	; 2
    27d0:	31 05       	cpc	r19, r1
    27d2:	89 f1       	breq	.+98     	; 0x2836 <DIO_u8SetPinValue+0xc0>
    27d4:	8f 81       	ldd	r24, Y+7	; 0x07
    27d6:	98 85       	ldd	r25, Y+8	; 0x08
    27d8:	83 30       	cpi	r24, 0x03	; 3
    27da:	91 05       	cpc	r25, r1
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <DIO_u8SetPinValue+0x6a>
    27de:	40 c0       	rjmp	.+128    	; 0x2860 <DIO_u8SetPinValue+0xea>
    27e0:	54 c0       	rjmp	.+168    	; 0x288a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    27e2:	ab e3       	ldi	r26, 0x3B	; 59
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	eb e3       	ldi	r30, 0x3B	; 59
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	48 2f       	mov	r20, r24
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	02 2e       	mov	r0, r18
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <DIO_u8SetPinValue+0x8a>
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	0a 94       	dec	r0
    2802:	e2 f7       	brpl	.-8      	; 0x27fc <DIO_u8SetPinValue+0x86>
    2804:	80 95       	com	r24
    2806:	84 23       	and	r24, r20
    2808:	8c 93       	st	X, r24
    280a:	bd c0       	rjmp	.+378    	; 0x2986 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    280c:	a8 e3       	ldi	r26, 0x38	; 56
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e8 e3       	ldi	r30, 0x38	; 56
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	48 2f       	mov	r20, r24
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	02 2e       	mov	r0, r18
    2824:	02 c0       	rjmp	.+4      	; 0x282a <DIO_u8SetPinValue+0xb4>
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	0a 94       	dec	r0
    282c:	e2 f7       	brpl	.-8      	; 0x2826 <DIO_u8SetPinValue+0xb0>
    282e:	80 95       	com	r24
    2830:	84 23       	and	r24, r20
    2832:	8c 93       	st	X, r24
    2834:	a8 c0       	rjmp	.+336    	; 0x2986 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2836:	a5 e3       	ldi	r26, 0x35	; 53
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e5 e3       	ldi	r30, 0x35	; 53
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	48 2f       	mov	r20, r24
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	02 2e       	mov	r0, r18
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <DIO_u8SetPinValue+0xde>
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	0a 94       	dec	r0
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <DIO_u8SetPinValue+0xda>
    2858:	80 95       	com	r24
    285a:	84 23       	and	r24, r20
    285c:	8c 93       	st	X, r24
    285e:	93 c0       	rjmp	.+294    	; 0x2986 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2860:	a2 e3       	ldi	r26, 0x32	; 50
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e2 e3       	ldi	r30, 0x32	; 50
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	48 2f       	mov	r20, r24
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	02 2e       	mov	r0, r18
    2878:	02 c0       	rjmp	.+4      	; 0x287e <DIO_u8SetPinValue+0x108>
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	0a 94       	dec	r0
    2880:	e2 f7       	brpl	.-8      	; 0x287a <DIO_u8SetPinValue+0x104>
    2882:	80 95       	com	r24
    2884:	84 23       	and	r24, r20
    2886:	8c 93       	st	X, r24
    2888:	7e c0       	rjmp	.+252    	; 0x2986 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	7b c0       	rjmp	.+246    	; 0x2986 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	09 f0       	breq	.+2      	; 0x2898 <DIO_u8SetPinValue+0x122>
    2896:	72 c0       	rjmp	.+228    	; 0x297c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	3e 83       	std	Y+6, r19	; 0x06
    28a0:	2d 83       	std	Y+5, r18	; 0x05
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	91 05       	cpc	r25, r1
    28aa:	49 f1       	breq	.+82     	; 0x28fe <DIO_u8SetPinValue+0x188>
    28ac:	2d 81       	ldd	r18, Y+5	; 0x05
    28ae:	3e 81       	ldd	r19, Y+6	; 0x06
    28b0:	22 30       	cpi	r18, 0x02	; 2
    28b2:	31 05       	cpc	r19, r1
    28b4:	2c f4       	brge	.+10     	; 0x28c0 <DIO_u8SetPinValue+0x14a>
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	61 f0       	breq	.+24     	; 0x28d6 <DIO_u8SetPinValue+0x160>
    28be:	5b c0       	rjmp	.+182    	; 0x2976 <DIO_u8SetPinValue+0x200>
    28c0:	2d 81       	ldd	r18, Y+5	; 0x05
    28c2:	3e 81       	ldd	r19, Y+6	; 0x06
    28c4:	22 30       	cpi	r18, 0x02	; 2
    28c6:	31 05       	cpc	r19, r1
    28c8:	71 f1       	breq	.+92     	; 0x2926 <DIO_u8SetPinValue+0x1b0>
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	83 30       	cpi	r24, 0x03	; 3
    28d0:	91 05       	cpc	r25, r1
    28d2:	e9 f1       	breq	.+122    	; 0x294e <DIO_u8SetPinValue+0x1d8>
    28d4:	50 c0       	rjmp	.+160    	; 0x2976 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    28d6:	ab e3       	ldi	r26, 0x3B	; 59
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	eb e3       	ldi	r30, 0x3B	; 59
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	48 2f       	mov	r20, r24
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	02 2e       	mov	r0, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <DIO_u8SetPinValue+0x17e>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	0a 94       	dec	r0
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <DIO_u8SetPinValue+0x17a>
    28f8:	84 2b       	or	r24, r20
    28fa:	8c 93       	st	X, r24
    28fc:	44 c0       	rjmp	.+136    	; 0x2986 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    28fe:	a8 e3       	ldi	r26, 0x38	; 56
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e8 e3       	ldi	r30, 0x38	; 56
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	48 2f       	mov	r20, r24
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	02 2e       	mov	r0, r18
    2916:	02 c0       	rjmp	.+4      	; 0x291c <DIO_u8SetPinValue+0x1a6>
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	0a 94       	dec	r0
    291e:	e2 f7       	brpl	.-8      	; 0x2918 <DIO_u8SetPinValue+0x1a2>
    2920:	84 2b       	or	r24, r20
    2922:	8c 93       	st	X, r24
    2924:	30 c0       	rjmp	.+96     	; 0x2986 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2926:	a5 e3       	ldi	r26, 0x35	; 53
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e5 e3       	ldi	r30, 0x35	; 53
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	48 2f       	mov	r20, r24
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	02 2e       	mov	r0, r18
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <DIO_u8SetPinValue+0x1ce>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	0a 94       	dec	r0
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <DIO_u8SetPinValue+0x1ca>
    2948:	84 2b       	or	r24, r20
    294a:	8c 93       	st	X, r24
    294c:	1c c0       	rjmp	.+56     	; 0x2986 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    294e:	a2 e3       	ldi	r26, 0x32	; 50
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e2 e3       	ldi	r30, 0x32	; 50
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	48 2f       	mov	r20, r24
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	02 2e       	mov	r0, r18
    2966:	02 c0       	rjmp	.+4      	; 0x296c <DIO_u8SetPinValue+0x1f6>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	0a 94       	dec	r0
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <DIO_u8SetPinValue+0x1f2>
    2970:	84 2b       	or	r24, r20
    2972:	8c 93       	st	X, r24
    2974:	08 c0       	rjmp	.+16     	; 0x2986 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	05 c0       	rjmp	.+10     	; 0x2986 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
}
    2988:	28 96       	adiw	r28, 0x08	; 8
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <DIO_u8SetPortValue+0x6>
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <DIO_u8SetPortValue+0x8>
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    29ac:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	3d 83       	std	Y+5, r19	; 0x05
    29b6:	2c 83       	std	Y+4, r18	; 0x04
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	91 05       	cpc	r25, r1
    29c0:	d1 f0       	breq	.+52     	; 0x29f6 <DIO_u8SetPortValue+0x5c>
    29c2:	2c 81       	ldd	r18, Y+4	; 0x04
    29c4:	3d 81       	ldd	r19, Y+5	; 0x05
    29c6:	22 30       	cpi	r18, 0x02	; 2
    29c8:	31 05       	cpc	r19, r1
    29ca:	2c f4       	brge	.+10     	; 0x29d6 <DIO_u8SetPortValue+0x3c>
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	9d 81       	ldd	r25, Y+5	; 0x05
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	61 f0       	breq	.+24     	; 0x29ec <DIO_u8SetPortValue+0x52>
    29d4:	1f c0       	rjmp	.+62     	; 0x2a14 <DIO_u8SetPortValue+0x7a>
    29d6:	2c 81       	ldd	r18, Y+4	; 0x04
    29d8:	3d 81       	ldd	r19, Y+5	; 0x05
    29da:	22 30       	cpi	r18, 0x02	; 2
    29dc:	31 05       	cpc	r19, r1
    29de:	81 f0       	breq	.+32     	; 0x2a00 <DIO_u8SetPortValue+0x66>
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	9d 81       	ldd	r25, Y+5	; 0x05
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	91 05       	cpc	r25, r1
    29e8:	81 f0       	breq	.+32     	; 0x2a0a <DIO_u8SetPortValue+0x70>
    29ea:	14 c0       	rjmp	.+40     	; 0x2a14 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    29ec:	eb e3       	ldi	r30, 0x3B	; 59
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	80 83       	st	Z, r24
    29f4:	11 c0       	rjmp	.+34     	; 0x2a18 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    29f6:	e8 e3       	ldi	r30, 0x38	; 56
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	80 83       	st	Z, r24
    29fe:	0c c0       	rjmp	.+24     	; 0x2a18 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    2a00:	e5 e3       	ldi	r30, 0x35	; 53
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	80 83       	st	Z, r24
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    2a0a:	e2 e3       	ldi	r30, 0x32	; 50
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	80 83       	st	Z, r24
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <DIO_u8TogglePinValue+0x6>
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <DIO_u8TogglePinValue+0x8>
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	8a 83       	std	Y+2, r24	; 0x02
    2a3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2a3c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	3d 83       	std	Y+5, r19	; 0x05
    2a46:	2c 83       	std	Y+4, r18	; 0x04
    2a48:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	91 05       	cpc	r25, r1
    2a50:	49 f1       	breq	.+82     	; 0x2aa4 <DIO_u8TogglePinValue+0x7a>
    2a52:	2c 81       	ldd	r18, Y+4	; 0x04
    2a54:	3d 81       	ldd	r19, Y+5	; 0x05
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <DIO_u8TogglePinValue+0x3c>
    2a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	61 f0       	breq	.+24     	; 0x2a7c <DIO_u8TogglePinValue+0x52>
    2a64:	5b c0       	rjmp	.+182    	; 0x2b1c <DIO_u8TogglePinValue+0xf2>
    2a66:	2c 81       	ldd	r18, Y+4	; 0x04
    2a68:	3d 81       	ldd	r19, Y+5	; 0x05
    2a6a:	22 30       	cpi	r18, 0x02	; 2
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	71 f1       	breq	.+92     	; 0x2acc <DIO_u8TogglePinValue+0xa2>
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	83 30       	cpi	r24, 0x03	; 3
    2a76:	91 05       	cpc	r25, r1
    2a78:	e9 f1       	breq	.+122    	; 0x2af4 <DIO_u8TogglePinValue+0xca>
    2a7a:	50 c0       	rjmp	.+160    	; 0x2b1c <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    2a7c:	ab e3       	ldi	r26, 0x3B	; 59
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	eb e3       	ldi	r30, 0x3B	; 59
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	48 2f       	mov	r20, r24
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	02 2e       	mov	r0, r18
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <DIO_u8TogglePinValue+0x70>
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	0a 94       	dec	r0
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <DIO_u8TogglePinValue+0x6c>
    2a9e:	84 27       	eor	r24, r20
    2aa0:	8c 93       	st	X, r24
    2aa2:	3e c0       	rjmp	.+124    	; 0x2b20 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    2aa4:	a8 e3       	ldi	r26, 0x38	; 56
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e8 e3       	ldi	r30, 0x38	; 56
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	48 2f       	mov	r20, r24
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	02 2e       	mov	r0, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <DIO_u8TogglePinValue+0x98>
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	0a 94       	dec	r0
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <DIO_u8TogglePinValue+0x94>
    2ac6:	84 27       	eor	r24, r20
    2ac8:	8c 93       	st	X, r24
    2aca:	2a c0       	rjmp	.+84     	; 0x2b20 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    2acc:	a5 e3       	ldi	r26, 0x35	; 53
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e5 e3       	ldi	r30, 0x35	; 53
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	48 2f       	mov	r20, r24
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 2e       	mov	r0, r18
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <DIO_u8TogglePinValue+0xc0>
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	0a 94       	dec	r0
    2aec:	e2 f7       	brpl	.-8      	; 0x2ae6 <DIO_u8TogglePinValue+0xbc>
    2aee:	84 27       	eor	r24, r20
    2af0:	8c 93       	st	X, r24
    2af2:	16 c0       	rjmp	.+44     	; 0x2b20 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    2af4:	a2 e3       	ldi	r26, 0x32	; 50
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e2 e3       	ldi	r30, 0x32	; 50
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	48 2f       	mov	r20, r24
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	02 2e       	mov	r0, r18
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <DIO_u8TogglePinValue+0xe8>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	0a 94       	dec	r0
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <DIO_u8TogglePinValue+0xe4>
    2b16:	84 27       	eor	r24, r20
    2b18:	8c 93       	st	X, r24
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	27 97       	sbiw	r28, 0x07	; 7
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	8a 83       	std	Y+2, r24	; 0x02
    2b48:	6b 83       	std	Y+3, r22	; 0x03
    2b4a:	5d 83       	std	Y+5, r21	; 0x05
    2b4c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2b4e:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	9d 81       	ldd	r25, Y+5	; 0x05
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <DIO_u8GetPinValue+0x28>
    2b58:	78 c0       	rjmp	.+240    	; 0x2c4a <DIO_u8GetPinValue+0x118>
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	88 30       	cpi	r24, 0x08	; 8
    2b5e:	08 f0       	brcs	.+2      	; 0x2b62 <DIO_u8GetPinValue+0x30>
    2b60:	74 c0       	rjmp	.+232    	; 0x2c4a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	3f 83       	std	Y+7, r19	; 0x07
    2b6a:	2e 83       	std	Y+6, r18	; 0x06
    2b6c:	4e 81       	ldd	r20, Y+6	; 0x06
    2b6e:	5f 81       	ldd	r21, Y+7	; 0x07
    2b70:	41 30       	cpi	r20, 0x01	; 1
    2b72:	51 05       	cpc	r21, r1
    2b74:	59 f1       	breq	.+86     	; 0x2bcc <DIO_u8GetPinValue+0x9a>
    2b76:	8e 81       	ldd	r24, Y+6	; 0x06
    2b78:	9f 81       	ldd	r25, Y+7	; 0x07
    2b7a:	82 30       	cpi	r24, 0x02	; 2
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	34 f4       	brge	.+12     	; 0x2b8c <DIO_u8GetPinValue+0x5a>
    2b80:	2e 81       	ldd	r18, Y+6	; 0x06
    2b82:	3f 81       	ldd	r19, Y+7	; 0x07
    2b84:	21 15       	cp	r18, r1
    2b86:	31 05       	cpc	r19, r1
    2b88:	69 f0       	breq	.+26     	; 0x2ba4 <DIO_u8GetPinValue+0x72>
    2b8a:	5c c0       	rjmp	.+184    	; 0x2c44 <DIO_u8GetPinValue+0x112>
    2b8c:	4e 81       	ldd	r20, Y+6	; 0x06
    2b8e:	5f 81       	ldd	r21, Y+7	; 0x07
    2b90:	42 30       	cpi	r20, 0x02	; 2
    2b92:	51 05       	cpc	r21, r1
    2b94:	79 f1       	breq	.+94     	; 0x2bf4 <DIO_u8GetPinValue+0xc2>
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9a:	83 30       	cpi	r24, 0x03	; 3
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <DIO_u8GetPinValue+0x70>
    2ba0:	3d c0       	rjmp	.+122    	; 0x2c1c <DIO_u8GetPinValue+0xea>
    2ba2:	50 c0       	rjmp	.+160    	; 0x2c44 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    2ba4:	e9 e3       	ldi	r30, 0x39	; 57
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <DIO_u8GetPinValue+0x8a>
    2bb8:	55 95       	asr	r21
    2bba:	47 95       	ror	r20
    2bbc:	8a 95       	dec	r24
    2bbe:	e2 f7       	brpl	.-8      	; 0x2bb8 <DIO_u8GetPinValue+0x86>
    2bc0:	ca 01       	movw	r24, r20
    2bc2:	81 70       	andi	r24, 0x01	; 1
    2bc4:	ec 81       	ldd	r30, Y+4	; 0x04
    2bc6:	fd 81       	ldd	r31, Y+5	; 0x05
    2bc8:	80 83       	st	Z, r24
    2bca:	41 c0       	rjmp	.+130    	; 0x2c4e <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    2bcc:	e6 e3       	ldi	r30, 0x36	; 54
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a9 01       	movw	r20, r18
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <DIO_u8GetPinValue+0xb2>
    2be0:	55 95       	asr	r21
    2be2:	47 95       	ror	r20
    2be4:	8a 95       	dec	r24
    2be6:	e2 f7       	brpl	.-8      	; 0x2be0 <DIO_u8GetPinValue+0xae>
    2be8:	ca 01       	movw	r24, r20
    2bea:	81 70       	andi	r24, 0x01	; 1
    2bec:	ec 81       	ldd	r30, Y+4	; 0x04
    2bee:	fd 81       	ldd	r31, Y+5	; 0x05
    2bf0:	80 83       	st	Z, r24
    2bf2:	2d c0       	rjmp	.+90     	; 0x2c4e <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    2bf4:	e3 e3       	ldi	r30, 0x33	; 51
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a9 01       	movw	r20, r18
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <DIO_u8GetPinValue+0xda>
    2c08:	55 95       	asr	r21
    2c0a:	47 95       	ror	r20
    2c0c:	8a 95       	dec	r24
    2c0e:	e2 f7       	brpl	.-8      	; 0x2c08 <DIO_u8GetPinValue+0xd6>
    2c10:	ca 01       	movw	r24, r20
    2c12:	81 70       	andi	r24, 0x01	; 1
    2c14:	ec 81       	ldd	r30, Y+4	; 0x04
    2c16:	fd 81       	ldd	r31, Y+5	; 0x05
    2c18:	80 83       	st	Z, r24
    2c1a:	19 c0       	rjmp	.+50     	; 0x2c4e <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    2c1c:	e0 e3       	ldi	r30, 0x30	; 48
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	88 2f       	mov	r24, r24
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a9 01       	movw	r20, r18
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <DIO_u8GetPinValue+0x102>
    2c30:	55 95       	asr	r21
    2c32:	47 95       	ror	r20
    2c34:	8a 95       	dec	r24
    2c36:	e2 f7       	brpl	.-8      	; 0x2c30 <DIO_u8GetPinValue+0xfe>
    2c38:	ca 01       	movw	r24, r20
    2c3a:	81 70       	andi	r24, 0x01	; 1
    2c3c:	ec 81       	ldd	r30, Y+4	; 0x04
    2c3e:	fd 81       	ldd	r31, Y+5	; 0x05
    2c40:	80 83       	st	Z, r24
    2c42:	05 c0       	rjmp	.+10     	; 0x2c4e <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c50:	27 96       	adiw	r28, 0x07	; 7
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	27 97       	sbiw	r28, 0x07	; 7
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	8b 83       	std	Y+3, r24	; 0x03
    2c78:	7d 83       	std	Y+5, r23	; 0x05
    2c7a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    2c7c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_pu8Value != NULL)
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	9d 81       	ldd	r25, Y+5	; 0x05
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <DIO_u8GetPortValue+0x26>
    2c86:	3e c0       	rjmp	.+124    	; 0x2d04 <DIO_u8GetPortValue+0xa2>
	{
		switch(Copy_u8Port)
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	3f 83       	std	Y+7, r19	; 0x07
    2c90:	2e 83       	std	Y+6, r18	; 0x06
    2c92:	8e 81       	ldd	r24, Y+6	; 0x06
    2c94:	9f 81       	ldd	r25, Y+7	; 0x07
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	91 05       	cpc	r25, r1
    2c9a:	e1 f0       	breq	.+56     	; 0x2cd4 <DIO_u8GetPortValue+0x72>
    2c9c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c9e:	3f 81       	ldd	r19, Y+7	; 0x07
    2ca0:	22 30       	cpi	r18, 0x02	; 2
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <DIO_u8GetPortValue+0x4e>
    2ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <DIO_u8GetPortValue+0x64>
    2cae:	27 c0       	rjmp	.+78     	; 0x2cfe <DIO_u8GetPortValue+0x9c>
    2cb0:	2e 81       	ldd	r18, Y+6	; 0x06
    2cb2:	3f 81       	ldd	r19, Y+7	; 0x07
    2cb4:	22 30       	cpi	r18, 0x02	; 2
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	a1 f0       	breq	.+40     	; 0x2ce2 <DIO_u8GetPortValue+0x80>
    2cba:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbe:	83 30       	cpi	r24, 0x03	; 3
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	b1 f0       	breq	.+44     	; 0x2cf0 <DIO_u8GetPortValue+0x8e>
    2cc4:	1c c0       	rjmp	.+56     	; 0x2cfe <DIO_u8GetPortValue+0x9c>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    2cc6:	e9 e3       	ldi	r30, 0x39	; 57
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	ec 81       	ldd	r30, Y+4	; 0x04
    2cce:	fd 81       	ldd	r31, Y+5	; 0x05
    2cd0:	80 83       	st	Z, r24
    2cd2:	1a c0       	rjmp	.+52     	; 0x2d08 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    2cd4:	e6 e3       	ldi	r30, 0x36	; 54
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	ec 81       	ldd	r30, Y+4	; 0x04
    2cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    2cde:	80 83       	st	Z, r24
    2ce0:	13 c0       	rjmp	.+38     	; 0x2d08 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    2ce2:	e3 e3       	ldi	r30, 0x33	; 51
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	ec 81       	ldd	r30, Y+4	; 0x04
    2cea:	fd 81       	ldd	r31, Y+5	; 0x05
    2cec:	80 83       	st	Z, r24
    2cee:	0c c0       	rjmp	.+24     	; 0x2d08 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    2cf0:	e0 e3       	ldi	r30, 0x30	; 48
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	ec 81       	ldd	r30, Y+4	; 0x04
    2cf8:	fd 81       	ldd	r31, Y+5	; 0x05
    2cfa:	80 83       	st	Z, r24
    2cfc:	05 c0       	rjmp	.+10     	; 0x2d08 <DIO_u8GetPortValue+0xa6>
		default: Local_u8ErrorState = 1; break;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	8a 83       	std	Y+2, r24	; 0x02
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <DIO_u8GetPortValue+0xa6>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d0a:	27 96       	adiw	r28, 0x07	; 7
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <KPD_voidInit>:
static u8 Keypad_4x4_adjustKeyNumber (u8 button_number);

#endif

void KPD_voidInit(void)
{
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
	// Setting Column pins to output
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_OUTPUT);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_OUTPUT);
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	61 e0       	ldi	r22, 0x01	; 1
    2d32:	41 e0       	ldi	r20, 0x01	; 1
    2d34:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_OUTPUT);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	62 e0       	ldi	r22, 0x02	; 2
    2d3c:	41 e0       	ldi	r20, 0x01	; 1
    2d3e:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_OUTPUT);
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	63 e0       	ldi	r22, 0x03	; 3
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_HIGH);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_HIGH);
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_HIGH);
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_HIGH);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	63 e0       	ldi	r22, 0x03	; 3
    2d6e:	41 e0       	ldi	r20, 0x01	; 1
    2d70:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>

	// Setting Row pins to input or input with pullup enabled
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8PIN_INPULLUP);
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	64 e0       	ldi	r22, 0x04	; 4
    2d78:	42 e0       	ldi	r20, 0x02	; 2
    2d7a:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8PIN_INPULLUP);
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	42 e0       	ldi	r20, 0x02	; 2
    2d84:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8PIN_INPULLUP);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	66 e0       	ldi	r22, 0x06	; 6
    2d8c:	42 e0       	ldi	r20, 0x02	; 2
    2d8e:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8PIN_INPULLUP);
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	67 e0       	ldi	r22, 0x07	; 7
    2d96:	42 e0       	ldi	r20, 0x02	; 2
    2d98:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
}
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <KPD_u8GetPressedKey>:



u8 KPD_u8GetPressedKey(void)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <KPD_u8GetPressedKey+0x6>
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    2dac:	19 82       	std	Y+1, r1	; 0x01
    2dae:	4c c0       	rjmp	.+152    	; 0x2e48 <KPD_u8GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    2db0:	ea e3       	ldi	r30, 0x3A	; 58
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	80 e1       	ldi	r24, 0x10	; 16
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <KPD_u8GetPressedKey+0x22>
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	2a 95       	dec	r18
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <KPD_u8GetPressedKey+0x1e>
    2dc8:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    2dca:	eb e3       	ldi	r30, 0x3B	; 59
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	80 e1       	ldi	r24, 0x10	; 16
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	02 2e       	mov	r0, r18
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <KPD_u8GetPressedKey+0x3e>
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	0a 94       	dec	r0
    2de2:	e2 f7       	brpl	.-8      	; 0x2ddc <KPD_u8GetPressedKey+0x3a>
    2de4:	80 95       	com	r24
    2de6:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    2de8:	1a 82       	std	Y+2, r1	; 0x02
    2dea:	28 c0       	rjmp	.+80     	; 0x2e3c <KPD_u8GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    2dec:	e9 e3       	ldi	r30, 0x39	; 57
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a9 01       	movw	r20, r18
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <KPD_u8GetPressedKey+0x62>
    2e00:	55 95       	asr	r21
    2e02:	47 95       	ror	r20
    2e04:	8a 95       	dec	r24
    2e06:	e2 f7       	brpl	.-8      	; 0x2e00 <KPD_u8GetPressedKey+0x5e>
    2e08:	ca 01       	movw	r24, r20
    2e0a:	81 70       	andi	r24, 0x01	; 1
    2e0c:	90 70       	andi	r25, 0x00	; 0
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	91 f4       	brne	.+36     	; 0x2e36 <KPD_u8GetPressedKey+0x94>
#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	98 2f       	mov	r25, r24
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	89 0f       	add	r24, r25
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	0e 94 29 17 	call	0x2e52	; 0x2e52 <Keypad_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	8f 5f       	subi	r24, 0xFF	; 255
    2e3a:	8a 83       	std	Y+2, r24	; 0x02
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	84 30       	cpi	r24, 0x04	; 4
    2e40:	a8 f2       	brcs	.-86     	; 0x2dec <KPD_u8GetPressedKey+0x4a>
u8 KPD_u8GetPressedKey(void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	8f 5f       	subi	r24, 0xFF	; 255
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	84 30       	cpi	r24, 0x04	; 4
    2e4c:	08 f4       	brcc	.+2      	; 0x2e50 <KPD_u8GetPressedKey+0xae>
    2e4e:	b0 cf       	rjmp	.-160    	; 0x2db0 <KPD_u8GetPressedKey+0xe>
    2e50:	ad cf       	rjmp	.-166    	; 0x2dac <KPD_u8GetPressedKey+0xa>

00002e52 <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

 static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <Keypad_4x4_adjustKeyNumber+0x6>
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <Keypad_4x4_adjustKeyNumber+0x8>
    2e5a:	0f 92       	push	r0
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	3c 83       	std	Y+4, r19	; 0x04
    2e6a:	2b 83       	std	Y+3, r18	; 0x03
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	88 30       	cpi	r24, 0x08	; 8
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <Keypad_4x4_adjustKeyNumber+0x26>
    2e76:	70 c0       	rjmp	.+224    	; 0x2f58 <Keypad_4x4_adjustKeyNumber+0x106>
    2e78:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e7c:	29 30       	cpi	r18, 0x09	; 9
    2e7e:	31 05       	cpc	r19, r1
    2e80:	5c f5       	brge	.+86     	; 0x2ed8 <Keypad_4x4_adjustKeyNumber+0x86>
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	84 30       	cpi	r24, 0x04	; 4
    2e88:	91 05       	cpc	r25, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <Keypad_4x4_adjustKeyNumber+0x3c>
    2e8c:	59 c0       	rjmp	.+178    	; 0x2f40 <Keypad_4x4_adjustKeyNumber+0xee>
    2e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e90:	3c 81       	ldd	r19, Y+4	; 0x04
    2e92:	25 30       	cpi	r18, 0x05	; 5
    2e94:	31 05       	cpc	r19, r1
    2e96:	9c f4       	brge	.+38     	; 0x2ebe <Keypad_4x4_adjustKeyNumber+0x6c>
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <Keypad_4x4_adjustKeyNumber+0x52>
    2ea2:	48 c0       	rjmp	.+144    	; 0x2f34 <Keypad_4x4_adjustKeyNumber+0xe2>
    2ea4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea8:	23 30       	cpi	r18, 0x03	; 3
    2eaa:	31 05       	cpc	r19, r1
    2eac:	0c f0       	brlt	.+2      	; 0x2eb0 <Keypad_4x4_adjustKeyNumber+0x5e>
    2eae:	45 c0       	rjmp	.+138    	; 0x2f3a <Keypad_4x4_adjustKeyNumber+0xe8>
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <Keypad_4x4_adjustKeyNumber+0x6a>
    2eba:	39 c0       	rjmp	.+114    	; 0x2f2e <Keypad_4x4_adjustKeyNumber+0xdc>
    2ebc:	68 c0       	rjmp	.+208    	; 0x2f8e <Keypad_4x4_adjustKeyNumber+0x13c>
    2ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec2:	26 30       	cpi	r18, 0x06	; 6
    2ec4:	31 05       	cpc	r19, r1
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <Keypad_4x4_adjustKeyNumber+0x78>
    2ec8:	41 c0       	rjmp	.+130    	; 0x2f4c <Keypad_4x4_adjustKeyNumber+0xfa>
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	87 30       	cpi	r24, 0x07	; 7
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	0c f0       	brlt	.+2      	; 0x2ed6 <Keypad_4x4_adjustKeyNumber+0x84>
    2ed4:	3e c0       	rjmp	.+124    	; 0x2f52 <Keypad_4x4_adjustKeyNumber+0x100>
    2ed6:	37 c0       	rjmp	.+110    	; 0x2f46 <Keypad_4x4_adjustKeyNumber+0xf4>
    2ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eda:	3c 81       	ldd	r19, Y+4	; 0x04
    2edc:	2c 30       	cpi	r18, 0x0C	; 12
    2ede:	31 05       	cpc	r19, r1
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <Keypad_4x4_adjustKeyNumber+0x92>
    2ee2:	46 c0       	rjmp	.+140    	; 0x2f70 <Keypad_4x4_adjustKeyNumber+0x11e>
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	8d 30       	cpi	r24, 0x0D	; 13
    2eea:	91 05       	cpc	r25, r1
    2eec:	5c f4       	brge	.+22     	; 0x2f04 <Keypad_4x4_adjustKeyNumber+0xb2>
    2eee:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef2:	2a 30       	cpi	r18, 0x0A	; 10
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	b1 f1       	breq	.+108    	; 0x2f64 <Keypad_4x4_adjustKeyNumber+0x112>
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	8b 30       	cpi	r24, 0x0B	; 11
    2efe:	91 05       	cpc	r25, r1
    2f00:	a4 f5       	brge	.+104    	; 0x2f6a <Keypad_4x4_adjustKeyNumber+0x118>
    2f02:	2d c0       	rjmp	.+90     	; 0x2f5e <Keypad_4x4_adjustKeyNumber+0x10c>
    2f04:	2b 81       	ldd	r18, Y+3	; 0x03
    2f06:	3c 81       	ldd	r19, Y+4	; 0x04
    2f08:	2e 30       	cpi	r18, 0x0E	; 14
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	b9 f1       	breq	.+110    	; 0x2f7c <Keypad_4x4_adjustKeyNumber+0x12a>
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	8e 30       	cpi	r24, 0x0E	; 14
    2f14:	91 05       	cpc	r25, r1
    2f16:	7c f1       	brlt	.+94     	; 0x2f76 <Keypad_4x4_adjustKeyNumber+0x124>
    2f18:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f1c:	2f 30       	cpi	r18, 0x0F	; 15
    2f1e:	31 05       	cpc	r19, r1
    2f20:	81 f1       	breq	.+96     	; 0x2f82 <Keypad_4x4_adjustKeyNumber+0x130>
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	80 31       	cpi	r24, 0x10	; 16
    2f28:	91 05       	cpc	r25, r1
    2f2a:	71 f1       	breq	.+92     	; 0x2f88 <Keypad_4x4_adjustKeyNumber+0x136>
    2f2c:	30 c0       	rjmp	.+96     	; 0x2f8e <Keypad_4x4_adjustKeyNumber+0x13c>
	{
		case 1:		return '!';
    2f2e:	91 e2       	ldi	r25, 0x21	; 33
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	2e c0       	rjmp	.+92     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 2:		return '@';
    2f34:	20 e4       	ldi	r18, 0x40	; 64
    2f36:	2a 83       	std	Y+2, r18	; 0x02
    2f38:	2b c0       	rjmp	.+86     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 3:		return '#';
    2f3a:	33 e2       	ldi	r19, 0x23	; 35
    2f3c:	3a 83       	std	Y+2, r19	; 0x02
    2f3e:	28 c0       	rjmp	.+80     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 4:		return '$';
    2f40:	84 e2       	ldi	r24, 0x24	; 36
    2f42:	8a 83       	std	Y+2, r24	; 0x02
    2f44:	25 c0       	rjmp	.+74     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 5:		return '*';
    2f46:	9a e2       	ldi	r25, 0x2A	; 42
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	22 c0       	rjmp	.+68     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 6:		return '4';
    2f4c:	24 e3       	ldi	r18, 0x34	; 52
    2f4e:	2a 83       	std	Y+2, r18	; 0x02
    2f50:	1f c0       	rjmp	.+62     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 7:		return '7';
    2f52:	37 e3       	ldi	r19, 0x37	; 55
    2f54:	3a 83       	std	Y+2, r19	; 0x02
    2f56:	1c c0       	rjmp	.+56     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 8:		return '1';
    2f58:	81 e3       	ldi	r24, 0x31	; 49
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	19 c0       	rjmp	.+50     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 9:		return '0';
    2f5e:	90 e3       	ldi	r25, 0x30	; 48
    2f60:	9a 83       	std	Y+2, r25	; 0x02
    2f62:	16 c0       	rjmp	.+44     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 10:	return '5';
    2f64:	25 e3       	ldi	r18, 0x35	; 53
    2f66:	2a 83       	std	Y+2, r18	; 0x02
    2f68:	13 c0       	rjmp	.+38     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 11:	return '8';
    2f6a:	38 e3       	ldi	r19, 0x38	; 56
    2f6c:	3a 83       	std	Y+2, r19	; 0x02
    2f6e:	10 c0       	rjmp	.+32     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 12:	return '2';
    2f70:	82 e3       	ldi	r24, 0x32	; 50
    2f72:	8a 83       	std	Y+2, r24	; 0x02
    2f74:	0d c0       	rjmp	.+26     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 13:	return '#';
    2f76:	93 e2       	ldi	r25, 0x23	; 35
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	0a c0       	rjmp	.+20     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 14:	return '6';
    2f7c:	26 e3       	ldi	r18, 0x36	; 54
    2f7e:	2a 83       	std	Y+2, r18	; 0x02
    2f80:	07 c0       	rjmp	.+14     	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 15:	return '9';
    2f82:	39 e3       	ldi	r19, 0x39	; 57
    2f84:	3a 83       	std	Y+2, r19	; 0x02
    2f86:	04 c0       	rjmp	.+8      	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 16:	return '3';
    2f88:	83 e3       	ldi	r24, 0x33	; 51
    2f8a:	8a 83       	std	Y+2, r24	; 0x02
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <Keypad_4x4_adjustKeyNumber+0x13e>
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <Keypad_4x4_adjustKeyNumber+0x142>
		break;
	}
}
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	9d 83       	std	Y+5, r25	; 0x05
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <LED_u8TurnOn>:
#include "LED_interface.h"
#include "LED_config.h"
#include "LED_private.h"

u8 LED_u8TurnOn(LED_t * LED)
{
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <LED_u8TurnOn+0x6>
    2fac:	0f 92       	push	r0
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	9b 83       	std	Y+3, r25	; 0x03
    2fb4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2fb6:	19 82       	std	Y+1, r1	; 0x01
	if((LED -> ConnType) == LED_u8SOURSE)
    2fb8:	ea 81       	ldd	r30, Y+2	; 0x02
    2fba:	fb 81       	ldd	r31, Y+3	; 0x03
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	88 23       	and	r24, r24
    2fc0:	59 f4       	brne	.+22     	; 0x2fd8 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_HIGH);
    2fc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2fc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2fc6:	80 81       	ld	r24, Z
    2fc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2fca:	fb 81       	ldd	r31, Y+3	; 0x03
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	69 2f       	mov	r22, r25
    2fd0:	41 e0       	ldi	r20, 0x01	; 1
    2fd2:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
    2fd6:	12 c0       	rjmp	.+36     	; 0x2ffc <LED_u8TurnOn+0x56>
	}
	else if((LED -> ConnType) == LED_u8SINK)
    2fd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2fda:	fb 81       	ldd	r31, Y+3	; 0x03
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	59 f4       	brne	.+22     	; 0x2ff8 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_LOW);
    2fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe6:	80 81       	ld	r24, Z
    2fe8:	ea 81       	ldd	r30, Y+2	; 0x02
    2fea:	fb 81       	ldd	r31, Y+3	; 0x03
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	69 2f       	mov	r22, r25
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <LED_u8TurnOn+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <LED_u8TurnOff>:

u8 LED_u8TurnOff(LED_t * LED)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <LED_u8TurnOff+0x6>
    3010:	0f 92       	push	r0
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	9b 83       	std	Y+3, r25	; 0x03
    3018:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    301a:	19 82       	std	Y+1, r1	; 0x01

	if((LED -> ConnType) == LED_u8SOURSE)
    301c:	ea 81       	ldd	r30, Y+2	; 0x02
    301e:	fb 81       	ldd	r31, Y+3	; 0x03
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	88 23       	and	r24, r24
    3024:	59 f4       	brne	.+22     	; 0x303c <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_LOW);
    3026:	ea 81       	ldd	r30, Y+2	; 0x02
    3028:	fb 81       	ldd	r31, Y+3	; 0x03
    302a:	80 81       	ld	r24, Z
    302c:	ea 81       	ldd	r30, Y+2	; 0x02
    302e:	fb 81       	ldd	r31, Y+3	; 0x03
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	69 2f       	mov	r22, r25
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
    303a:	12 c0       	rjmp	.+36     	; 0x3060 <LED_u8TurnOff+0x56>
	}
	else if((LED -> ConnType) == LED_u8SINK)
    303c:	ea 81       	ldd	r30, Y+2	; 0x02
    303e:	fb 81       	ldd	r31, Y+3	; 0x03
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	59 f4       	brne	.+22     	; 0x305c <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_HIGH);
    3046:	ea 81       	ldd	r30, Y+2	; 0x02
    3048:	fb 81       	ldd	r31, Y+3	; 0x03
    304a:	80 81       	ld	r24, Z
    304c:	ea 81       	ldd	r30, Y+2	; 0x02
    304e:	fb 81       	ldd	r31, Y+3	; 0x03
    3050:	91 81       	ldd	r25, Z+1	; 0x01
    3052:	69 2f       	mov	r22, r25
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <LED_u8TurnOff+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3060:	89 81       	ldd	r24, Y+1	; 0x01
}
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <MATH_u32GetExponential>:
 * Description : module that calculate exponential value for a given base and exponent numbers   
 * Argument    : exponent, base
 * return      : exponential value
 */
u32 MATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	27 97       	sbiw	r28, 0x07	; 7
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	8e 83       	std	Y+6, r24	; 0x06
    3084:	6f 83       	std	Y+7, r22	; 0x07
    u32 Local_u32Result = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	a0 e0       	ldi	r26, 0x00	; 0
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	9b 83       	std	Y+3, r25	; 0x03
    3092:	ac 83       	std	Y+4, r26	; 0x04
    3094:	bd 83       	std	Y+5, r27	; 0x05
    for(u8 i =0; i<Copy_u8LExponent;i++)
    3096:	19 82       	std	Y+1, r1	; 0x01
    3098:	16 c0       	rjmp	.+44     	; 0x30c6 <MATH_u32GetExponential+0x58>
    {
        Local_u32Result *= Copy_u8LBase;
    309a:	8e 81       	ldd	r24, Y+6	; 0x06
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	9b 81       	ldd	r25, Y+3	; 0x03
    30a8:	ac 81       	ldd	r26, Y+4	; 0x04
    30aa:	bd 81       	ldd	r27, Y+5	; 0x05
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__mulsi3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	8a 83       	std	Y+2, r24	; 0x02
    30ba:	9b 83       	std	Y+3, r25	; 0x03
    30bc:	ac 83       	std	Y+4, r26	; 0x04
    30be:	bd 83       	std	Y+5, r27	; 0x05
 * return      : exponential value
 */
u32 MATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
    u32 Local_u32Result = 1;
    for(u8 i =0; i<Copy_u8LExponent;i++)
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	8f 5f       	subi	r24, 0xFF	; 255
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	99 81       	ldd	r25, Y+1	; 0x01
    30c8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ca:	98 17       	cp	r25, r24
    30cc:	30 f3       	brcs	.-52     	; 0x309a <MATH_u32GetExponential+0x2c>
    {
        Local_u32Result *= Copy_u8LBase;
    }
    return Local_u32Result;
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	ac 81       	ldd	r26, Y+4	; 0x04
    30d4:	bd 81       	ldd	r27, Y+5	; 0x05
}
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	27 96       	adiw	r28, 0x07	; 7
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <RTOS_u8CreateTask>:
Task_t SystemTasks [TASK_NUM] = {{NULL}};



u8 RTOS_u8CreateTask(u8 Copy_u8Priority , u16 Copy_u16Periodicity , void (*Copy_pvTaskFunc)(void) , u8 Copy_u8FirstDelay)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	27 97       	sbiw	r28, 0x07	; 7
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	8a 83       	std	Y+2, r24	; 0x02
    3102:	7c 83       	std	Y+4, r23	; 0x04
    3104:	6b 83       	std	Y+3, r22	; 0x03
    3106:	5e 83       	std	Y+6, r21	; 0x06
    3108:	4d 83       	std	Y+5, r20	; 0x05
    310a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState = OK;
    310c:	19 82       	std	Y+1, r1	; 0x01

	if(SystemTasks[Copy_u8Priority].TaskFunc == NULL)
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	c9 01       	movw	r24, r18
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	82 0f       	add	r24, r18
    311c:	93 1f       	adc	r25, r19
    311e:	01 96       	adiw	r24, 0x01	; 1
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	fc 01       	movw	r30, r24
    3126:	e7 53       	subi	r30, 0x37	; 55
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	09 f0       	breq	.+2      	; 0x3134 <RTOS_u8CreateTask+0x48>
    3132:	42 c0       	rjmp	.+132    	; 0x31b8 <RTOS_u8CreateTask+0xcc>
	{
		SystemTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	c9 01       	movw	r24, r18
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	82 0f       	add	r24, r18
    3142:	93 1f       	adc	r25, r19
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	fc 01       	movw	r30, r24
    314a:	e7 53       	subi	r30, 0x37	; 55
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].TaskFunc    = Copy_pvTaskFunc;
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	c9 01       	movw	r24, r18
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	82 0f       	add	r24, r18
    3164:	93 1f       	adc	r25, r19
    3166:	01 96       	adiw	r24, 0x01	; 1
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	fc 01       	movw	r30, r24
    316e:	e7 53       	subi	r30, 0x37	; 55
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	8d 81       	ldd	r24, Y+5	; 0x05
    3174:	9e 81       	ldd	r25, Y+6	; 0x06
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].State	     = TASK_RESUMED;
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	c9 01       	movw	r24, r18
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	82 0f       	add	r24, r18
    3188:	93 1f       	adc	r25, r19
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	fc 01       	movw	r30, r24
    3190:	e3 53       	subi	r30, 0x33	; 51
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].FirstDelay	 = Copy_u8FirstDelay ;
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	c9 01       	movw	r24, r18
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	82 0f       	add	r24, r18
    31a6:	93 1f       	adc	r25, r19
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	fc 01       	movw	r30, r24
    31ae:	e2 53       	subi	r30, 0x32	; 50
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	8f 81       	ldd	r24, Y+7	; 0x07
    31b4:	80 83       	st	Z, r24
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <RTOS_u8CreateTask+0xd0>
	}
	else
	{
		/* Required priority is reserved for another function */
		Local_u8ErrorState = NOK;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    31be:	27 96       	adiw	r28, 0x07	; 7
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <RTOS_voidStart>:

void RTOS_voidStart(void)
{
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
	TIMER0_u8SetCallBack(&Schedular);
    31d8:	80 e4       	ldi	r24, 0x40	; 64
    31da:	99 e1       	ldi	r25, 0x19	; 25
    31dc:	0e 94 09 1a 	call	0x3412	; 0x3412 <TIMER0_u8SetCallBack>
	TIMER0_voidInit();
    31e0:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <TIMER0_voidInit>
}
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <RTOS_voidDeleteTask>:

void RTOS_voidDeleteTask(u8 Copy_u8Priority)
{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].TaskFunc = NULL;
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	c9 01       	movw	r24, r18
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	82 0f       	add	r24, r18
    3204:	93 1f       	adc	r25, r19
    3206:	01 96       	adiw	r24, 0x01	; 1
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	fc 01       	movw	r30, r24
    320e:	e7 53       	subi	r30, 0x37	; 55
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	11 82       	std	Z+1, r1	; 0x01
    3214:	10 82       	st	Z, r1
}
    3216:	0f 90       	pop	r0
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <RTOS_voidSuspendTask>:

void RTOS_voidSuspendTask(u8 Copy_u8Priority)
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	0f 92       	push	r0
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State = TASK_SUSPENDED;
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	c9 01       	movw	r24, r18
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	82 0f       	add	r24, r18
    3238:	93 1f       	adc	r25, r19
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	fc 01       	movw	r30, r24
    3240:	e3 53       	subi	r30, 0x33	; 51
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	10 82       	st	Z, r1
}
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Copy_u8Priority)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	0f 92       	push	r0
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State = TASK_RESUMED;
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	c9 01       	movw	r24, r18
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	82 0f       	add	r24, r18
    3268:	93 1f       	adc	r25, r19
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	fc 01       	movw	r30, r24
    3270:	e3 53       	subi	r30, 0x33	; 51
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 83       	st	Z, r24
}
    3278:	0f 90       	pop	r0
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <Schedular>:


static void Schedular(void)
{
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	0f 92       	push	r0
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TaskCounter;
	
	for(Local_u8TaskCounter = 0; Local_u8TaskCounter < TASK_NUM; Local_u8TaskCounter++)
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	85 c0       	rjmp	.+266    	; 0x3398 <Schedular+0x118>
	{
		/*Check if the task us resumed or suspended*/
		if(SystemTasks[Local_u8TaskCounter].State == TASK_RESUMED)
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	c9 01       	movw	r24, r18
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	fc 01       	movw	r30, r24
    32a4:	e3 53       	subi	r30, 0x33	; 51
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <Schedular+0x30>
    32ae:	71 c0       	rjmp	.+226    	; 0x3392 <Schedular+0x112>
		{
			if(SystemTasks[Local_u8TaskCounter].FirstDelay == 0)
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	c9 01       	movw	r24, r18
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	82 0f       	add	r24, r18
    32be:	93 1f       	adc	r25, r19
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	fc 01       	movw	r30, r24
    32c6:	e2 53       	subi	r30, 0x32	; 50
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	80 81       	ld	r24, Z
    32cc:	88 23       	and	r24, r24
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <Schedular+0x52>
    32d0:	45 c0       	rjmp	.+138    	; 0x335c <Schedular+0xdc>
			{
				/* Invoke the task function */
				if(SystemTasks[Local_u8TaskCounter].TaskFunc != NULL)
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	28 2f       	mov	r18, r24
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	c9 01       	movw	r24, r18
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	01 96       	adiw	r24, 0x01	; 1
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	fc 01       	movw	r30, r24
    32ea:	e7 53       	subi	r30, 0x37	; 55
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <Schedular+0x78>
    32f6:	4d c0       	rjmp	.+154    	; 0x3392 <Schedular+0x112>
				{
					SystemTasks[Local_u8TaskCounter].TaskFunc();
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	c9 01       	movw	r24, r18
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	82 0f       	add	r24, r18
    3306:	93 1f       	adc	r25, r19
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	fc 01       	movw	r30, r24
    3310:	e7 53       	subi	r30, 0x37	; 55
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	01 90       	ld	r0, Z+
    3316:	f0 81       	ld	r31, Z
    3318:	e0 2d       	mov	r30, r0
    331a:	09 95       	icall
					SystemTasks[Local_u8TaskCounter].FirstDelay = SystemTasks[Local_u8TaskCounter].Periodicity - 1;
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	48 2f       	mov	r20, r24
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	c9 01       	movw	r24, r18
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	fc 01       	movw	r30, r24
    3338:	e7 53       	subi	r30, 0x37	; 55
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 81       	ld	r24, Z
    333e:	91 81       	ldd	r25, Z+1	; 0x01
    3340:	28 2f       	mov	r18, r24
    3342:	21 50       	subi	r18, 0x01	; 1
    3344:	ca 01       	movw	r24, r20
    3346:	88 0f       	add	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	84 0f       	add	r24, r20
    334c:	95 1f       	adc	r25, r21
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	fc 01       	movw	r30, r24
    3354:	e2 53       	subi	r30, 0x32	; 50
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	20 83       	st	Z, r18
    335a:	1b c0       	rjmp	.+54     	; 0x3392 <Schedular+0x112>

			}
			else
			{
				/* Decrement The first delay */
				SystemTasks[Local_u8TaskCounter].FirstDelay--;
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	28 2f       	mov	r18, r24
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	c9 01       	movw	r24, r18
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	82 0f       	add	r24, r18
    336a:	93 1f       	adc	r25, r19
    336c:	88 0f       	add	r24, r24
    336e:	99 1f       	adc	r25, r25
    3370:	fc 01       	movw	r30, r24
    3372:	e2 53       	subi	r30, 0x32	; 50
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	48 2f       	mov	r20, r24
    337a:	41 50       	subi	r20, 0x01	; 1
    337c:	c9 01       	movw	r24, r18
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	82 0f       	add	r24, r18
    3384:	93 1f       	adc	r25, r19
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	fc 01       	movw	r30, r24
    338c:	e2 53       	subi	r30, 0x32	; 50
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	40 83       	st	Z, r20

static void Schedular(void)
{
	u8 Local_u8TaskCounter;
	
	for(Local_u8TaskCounter = 0; Local_u8TaskCounter < TASK_NUM; Local_u8TaskCounter++)
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	83 30       	cpi	r24, 0x03	; 3
    339c:	08 f4       	brcc	.+2      	; 0x33a0 <Schedular+0x120>
    339e:	77 cf       	rjmp	.-274    	; 0x328e <Schedular+0xe>
			/*Task is suspended , do nothing*/
		}

	}

}
    33a0:	0f 90       	pop	r0
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <TIMER0_voidInit>:
static void (*TIMER0_pvCallBackFunc)(void) = NULL;



void TIMER0_voidInit(void)
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
#elif TIMER_SelectMode == Timer_PWMPhaseCorrectMode
	SET_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);

#elif TIMER_SelectMode == Timer_CTCMode
	CLR_BIT(TCCR0,TCCR0_WGM00);
    33b0:	a3 e5       	ldi	r26, 0x53	; 83
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	e3 e5       	ldi	r30, 0x53	; 83
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	8f 7b       	andi	r24, 0xBF	; 191
    33bc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    33be:	a3 e5       	ldi	r26, 0x53	; 83
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	e3 e5       	ldi	r30, 0x53	; 83
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	88 60       	ori	r24, 0x08	; 8
    33ca:	8c 93       	st	X, r24
	
	/*Set compare match value to 125 For 1ms compare time*/
	OCR0 = 125;
    33cc:	ec e5       	ldi	r30, 0x5C	; 92
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	8d e7       	ldi	r24, 0x7D	; 125
    33d2:	80 83       	st	Z, r24
	
	/*Output compare match interrupt enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    33d4:	a9 e5       	ldi	r26, 0x59	; 89
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	e9 e5       	ldi	r30, 0x59	; 89
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	82 60       	ori	r24, 0x02	; 2
    33e0:	8c 93       	st	X, r24
#error "Wrong Select Mode"
#endif


	/*Set Timer : Prescaler Division by 64*/
	SET_BIT(TCCR0,TCCR0_CS00);
    33e2:	a3 e5       	ldi	r26, 0x53	; 83
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e3 e5       	ldi	r30, 0x53	; 83
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	81 60       	ori	r24, 0x01	; 1
    33ee:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    33f0:	a3 e5       	ldi	r26, 0x53	; 83
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e3 e5       	ldi	r30, 0x53	; 83
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	82 60       	ori	r24, 0x02	; 2
    33fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    33fe:	a3 e5       	ldi	r26, 0x53	; 83
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e3 e5       	ldi	r30, 0x53	; 83
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	8b 7f       	andi	r24, 0xFB	; 251
    340a:	8c 93       	st	X, r24
}
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	00 d0       	rcall	.+0      	; 0x3418 <TIMER0_u8SetCallBack+0x6>
    3418:	0f 92       	push	r0
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	9b 83       	std	Y+3, r25	; 0x03
    3420:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    3422:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	9b 81       	ldd	r25, Y+3	; 0x03
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	39 f0       	breq	.+14     	; 0x343a <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	9b 81       	ldd	r25, Y+3	; 0x03
    3430:	90 93 dc 00 	sts	0x00DC, r25
    3434:	80 93 db 00 	sts	0x00DB, r24
    3438:	02 c0       	rjmp	.+4      	; 0x343e <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    343e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <__vector_10>:


/* CTC_ISR */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    344c:	1f 92       	push	r1
    344e:	0f 92       	push	r0
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	0f 92       	push	r0
    3454:	11 24       	eor	r1, r1
    3456:	2f 93       	push	r18
    3458:	3f 93       	push	r19
    345a:	4f 93       	push	r20
    345c:	5f 93       	push	r21
    345e:	6f 93       	push	r22
    3460:	7f 93       	push	r23
    3462:	8f 93       	push	r24
    3464:	9f 93       	push	r25
    3466:	af 93       	push	r26
    3468:	bf 93       	push	r27
    346a:	ef 93       	push	r30
    346c:	ff 93       	push	r31
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    3476:	80 91 db 00 	lds	r24, 0x00DB
    347a:	90 91 dc 00 	lds	r25, 0x00DC
    347e:	00 97       	sbiw	r24, 0x00	; 0
    3480:	29 f0       	breq	.+10     	; 0x348c <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    3482:	e0 91 db 00 	lds	r30, 0x00DB
    3486:	f0 91 dc 00 	lds	r31, 0x00DC
    348a:	09 95       	icall
	}
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	ff 91       	pop	r31
    3492:	ef 91       	pop	r30
    3494:	bf 91       	pop	r27
    3496:	af 91       	pop	r26
    3498:	9f 91       	pop	r25
    349a:	8f 91       	pop	r24
    349c:	7f 91       	pop	r23
    349e:	6f 91       	pop	r22
    34a0:	5f 91       	pop	r21
    34a2:	4f 91       	pop	r20
    34a4:	3f 91       	pop	r19
    34a6:	2f 91       	pop	r18
    34a8:	0f 90       	pop	r0
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	0f 90       	pop	r0
    34ae:	1f 90       	pop	r1
    34b0:	18 95       	reti

000034b2 <main>:

/*blank string to clear line*/
u8  *APP_u8PtrClearDisplayedString  = "                ";

int main(void)
{
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
	/*System Initialization*/
	APP_voidInitializeSystem();
    34ba:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <APP_voidInitializeSystem>

	/*Create system tasks*/
	APP_voidCreateSystemTasks();
    34be:	0e 94 8c 1a 	call	0x3518	; 0x3518 <APP_voidCreateSystemTasks>

	/*OS Start*/
	RTOS_voidStart();
    34c2:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <RTOS_voidStart>
    34c6:	ff cf       	rjmp	.-2      	; 0x34c6 <main+0x14>

000034c8 <APP_voidInitializeSystem>:
	while(1);

}

void APP_voidInitializeSystem(void)
{
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
	/*DIO Initialization*/
	DIO_u8SetPinDirection(APP_HEATER_PORT, APP_HEATER_PIN, DIO_u8PIN_OUTPUT);
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	41 e0       	ldi	r20, 0x01	; 1
    34d6:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(APP_LAMP_PORT, APP_LAMP_PIN, DIO_u8PIN_OUTPUT);
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	61 e0       	ldi	r22, 0x01	; 1
    34de:	41 e0       	ldi	r20, 0x01	; 1
    34e0:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(APP_MOTOR_PORT, APP_MOTOR_PIN, DIO_u8PIN_OUTPUT);
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	62 e0       	ldi	r22, 0x02	; 2
    34e8:	41 e0       	ldi	r20, 0x01	; 1
    34ea:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>

	/*sensors initialization*/
	DIO_u8SetPinDirection(APP_DOOR_SENSOR_PORT, APP_DOOR_SENSOR_PIN, DIO_u8PIN_OUTPUT);
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	63 e0       	ldi	r22, 0x03	; 3
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(APP_WEIGH_SENSOR_PORT, APP_WEIGH_SENSOR_PIN, DIO_u8PIN_OUTPUT);
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	64 e0       	ldi	r22, 0x04	; 4
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	0e 94 9c 11 	call	0x2338	; 0x2338 <DIO_u8SetPinDirection>

	/*Initialize Keypad*/
	KPD_voidInit();
    3502:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <KPD_voidInit>

	/*Initialize LCD*/
	CLCD_voidInit();
    3506:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <CLCD_voidInit>
	CLCD_voidSendString("Set Heating Time");
    350a:	81 e7       	ldi	r24, 0x71	; 113
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
}
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <APP_voidCreateSystemTasks>:

void APP_voidCreateSystemTasks(void)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	RTOS_u8CreateTask(0 , 2 , APP_voidGetPressedKey , 1);
    3520:	20 ec       	ldi	r18, 0xC0	; 192
    3522:	3a e1       	ldi	r19, 0x1A	; 26
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	62 e0       	ldi	r22, 0x02	; 2
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	a9 01       	movw	r20, r18
    352c:	21 e0       	ldi	r18, 0x01	; 1
    352e:	0e 94 76 18 	call	0x30ec	; 0x30ec <RTOS_u8CreateTask>
	RTOS_u8CreateTask(1 , 2 , APP_voidUpdateSensorReadings , 1);
    3532:	27 e6       	ldi	r18, 0x67	; 103
    3534:	3b e1       	ldi	r19, 0x1B	; 27
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	62 e0       	ldi	r22, 0x02	; 2
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	a9 01       	movw	r20, r18
    353e:	21 e0       	ldi	r18, 0x01	; 1
    3540:	0e 94 76 18 	call	0x30ec	; 0x30ec <RTOS_u8CreateTask>
	RTOS_u8CreateTask(2 , 2 , APP_voidUpdateCurrentMode , 2);
    3544:	23 e8       	ldi	r18, 0x83	; 131
    3546:	3b e1       	ldi	r19, 0x1B	; 27
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	62 e0       	ldi	r22, 0x02	; 2
    354c:	70 e0       	ldi	r23, 0x00	; 0
    354e:	a9 01       	movw	r20, r18
    3550:	22 e0       	ldi	r18, 0x02	; 2
    3552:	0e 94 76 18 	call	0x30ec	; 0x30ec <RTOS_u8CreateTask>
	RTOS_u8CreateTask(3 , 2 , APP_voidDisplayLCD , 3);
    3556:	26 ed       	ldi	r18, 0xD6	; 214
    3558:	3a e1       	ldi	r19, 0x1A	; 26
    355a:	83 e0       	ldi	r24, 0x03	; 3
    355c:	62 e0       	ldi	r22, 0x02	; 2
    355e:	70 e0       	ldi	r23, 0x00	; 0
    3560:	a9 01       	movw	r20, r18
    3562:	23 e0       	ldi	r18, 0x03	; 3
    3564:	0e 94 76 18 	call	0x30ec	; 0x30ec <RTOS_u8CreateTask>
	RTOS_u8CreateTask(4 , 2 , APP_voidUpdateOutputState , 3);
    3568:	26 e0       	ldi	r18, 0x06	; 6
    356a:	3d e1       	ldi	r19, 0x1D	; 29
    356c:	84 e0       	ldi	r24, 0x04	; 4
    356e:	62 e0       	ldi	r22, 0x02	; 2
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	a9 01       	movw	r20, r18
    3574:	23 e0       	ldi	r18, 0x03	; 3
    3576:	0e 94 76 18 	call	0x30ec	; 0x30ec <RTOS_u8CreateTask>
}
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <APP_voidGetPressedKey>:

void APP_voidGetPressedKey(void)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	0f 92       	push	r0
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
	/*get pressed key value*/
	u8 Local_u8Temp = KPD_u8GetPressedKey();
    358a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <KPD_u8GetPressedKey>
    358e:	89 83       	std	Y+1, r24	; 0x01

	/*any key pressed check*/
	if (Local_u8Temp != '?')
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	8f 33       	cpi	r24, 0x3F	; 63
    3594:	21 f0       	breq	.+8      	; 0x359e <APP_voidGetPressedKey+0x1e>
	{
		/*return pressed key value*/
		APP_u8PressedKey = Local_u8Temp;
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	80 93 c4 00 	sts	0x00C4, r24
    359c:	03 c0       	rjmp	.+6      	; 0x35a4 <APP_voidGetPressedKey+0x24>
	}
	else /*no key pressed*/
 	{
		/*return dummy value*/
		APP_u8PressedKey = 'K';
    359e:	8b e4       	ldi	r24, 0x4B	; 75
    35a0:	80 93 c4 00 	sts	0x00C4, r24

	}

}
    35a4:	0f 90       	pop	r0
    35a6:	cf 91       	pop	r28
    35a8:	df 91       	pop	r29
    35aa:	08 95       	ret

000035ac <APP_voidDisplayLCD>:

void APP_voidDisplayLCD(void)
{
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
	/*Display mode check*/
	/*Display set time mode*/
	if ( APP_u8AppMode == APP_SET_TIME )
    35b4:	80 91 df 00 	lds	r24, 0x00DF
    35b8:	88 23       	and	r24, r24
    35ba:	59 f5       	brne	.+86     	; 0x3612 <APP_voidDisplayLCD+0x66>
	{
		/*Display set Heating Time message in line1*/
		CLCD_voidGoToXY(0,0);
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString(APP_u8PtrClearDisplayedString);
    35c4:	80 91 c5 00 	lds	r24, 0x00C5
    35c8:	90 91 c6 00 	lds	r25, 0x00C6
    35cc:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
		CLCD_voidGoToXY(0,0);
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString("Set Heating Time");
    35d8:	81 e7       	ldi	r24, 0x71	; 113
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

		/*Display pressed keys in line 2*/
		CLCD_voidGoToXY(1,0);
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	60 e0       	ldi	r22, 0x00	; 0
    35e4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString(APP_u8PtrClearDisplayedString);
    35e8:	80 91 c5 00 	lds	r24, 0x00C5
    35ec:	90 91 c6 00 	lds	r25, 0x00C6
    35f0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(&APP_u32SetTime);
    35fc:	81 ee       	ldi	r24, 0xE1	; 225
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	aa 27       	eor	r26, r26
    3602:	97 fd       	sbrc	r25, 7
    3604:	a0 95       	com	r26
    3606:	ba 2f       	mov	r27, r26
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <CLCD_voidSendNumber>
    3610:	5b c0       	rjmp	.+182    	; 0x36c8 <APP_voidDisplayLCD+0x11c>
	}

	/*Display remaining time mode*/
	else if ( APP_u8AppMode == APP_REMAINING_DISPLAY_TIME )
    3612:	80 91 df 00 	lds	r24, 0x00DF
    3616:	81 30       	cpi	r24, 0x01	; 1
    3618:	59 f5       	brne	.+86     	; 0x3670 <APP_voidDisplayLCD+0xc4>
	{
		/*Display Remaining Time message in line1*/
		CLCD_voidGoToXY(0,0);
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString(APP_u8PtrClearDisplayedString);
    3622:	80 91 c5 00 	lds	r24, 0x00C5
    3626:	90 91 c6 00 	lds	r25, 0x00C6
    362a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
		CLCD_voidGoToXY(0,0);
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString("Remaining Time");
    3636:	82 e8       	ldi	r24, 0x82	; 130
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

		/*Display remaining heating time in line2*/
		CLCD_voidGoToXY(1,0);
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString(APP_u8PtrClearDisplayedString);
    3646:	80 91 c5 00 	lds	r24, 0x00C5
    364a:	90 91 c6 00 	lds	r25, 0x00C6
    364e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(&APP_u32RemainingTime);
    365a:	85 ee       	ldi	r24, 0xE5	; 229
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	aa 27       	eor	r26, r26
    3660:	97 fd       	sbrc	r25, 7
    3662:	a0 95       	com	r26
    3664:	ba 2f       	mov	r27, r26
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <CLCD_voidSendNumber>
    366e:	2c c0       	rjmp	.+88     	; 0x36c8 <APP_voidDisplayLCD+0x11c>
	}

	/*Display close door message*/
	else if ( APP_u8AppMode == APP_CLOSE_DOOR )
    3670:	80 91 df 00 	lds	r24, 0x00DF
    3674:	82 30       	cpi	r24, 0x02	; 2
    3676:	59 f4       	brne	.+22     	; 0x368e <APP_voidDisplayLCD+0xe2>
	{
		/*Display Close Door message in line1*/
		CLCD_voidClearScreen ();
    3678:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
		CLCD_voidGoToXY(0,0);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString("Close Door");
    3684:	81 e9       	ldi	r24, 0x91	; 145
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    368c:	1d c0       	rjmp	.+58     	; 0x36c8 <APP_voidDisplayLCD+0x11c>

	}
	/*Display put food message*/
	else if ( APP_u8AppMode == APP_PUT_FOOD )
    368e:	80 91 df 00 	lds	r24, 0x00DF
    3692:	83 30       	cpi	r24, 0x03	; 3
    3694:	59 f4       	brne	.+22     	; 0x36ac <APP_voidDisplayLCD+0x100>
	{
		/*Display Put food message message in line1*/
		CLCD_voidClearScreen ();
    3696:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
		CLCD_voidGoToXY(0,0);
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	60 e0       	ldi	r22, 0x00	; 0
    369e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString("Put Food First");
    36a2:	8c e9       	ldi	r24, 0x9C	; 156
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    36aa:	0e c0       	rjmp	.+28     	; 0x36c8 <APP_voidDisplayLCD+0x11c>
	}
	/*Display put food and close door message*/
	else if ( APP_u8AppMode == APP_CLOSE_DOOR_PUT_FOOD )
    36ac:	80 91 df 00 	lds	r24, 0x00DF
    36b0:	84 30       	cpi	r24, 0x04	; 4
    36b2:	51 f4       	brne	.+20     	; 0x36c8 <APP_voidDisplayLCD+0x11c>
	{
		/*Display CloseDoorPutFood message in line1*/
		CLCD_voidClearScreen ();
    36b4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
		CLCD_voidGoToXY(0,0);
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
		CLCD_voidSendString("CloseDoorPutFood");
    36c0:	8b ea       	ldi	r24, 0xAB	; 171
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
	}
}
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <APP_voidUpdateSensorReadings>:

void APP_voidUpdateSensorReadings(void)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
	/*Check pressed key*/
	if (APP_u8PressedKey == 'A')
    36d6:	80 91 c4 00 	lds	r24, 0x00C4
    36da:	81 34       	cpi	r24, 0x41	; 65
    36dc:	39 f4       	brne	.+14     	; 0x36ec <APP_voidUpdateSensorReadings+0x1e>
	{
		/*Toggle Weigh sensor state*/
		APP_u8WeightSensorState ^= 1;
    36de:	80 91 dd 00 	lds	r24, 0x00DD
    36e2:	91 e0       	ldi	r25, 0x01	; 1
    36e4:	89 27       	eor	r24, r25
    36e6:	80 93 dd 00 	sts	0x00DD, r24
    36ea:	0a c0       	rjmp	.+20     	; 0x3700 <APP_voidUpdateSensorReadings+0x32>

	}
	else if (APP_u8PressedKey == 'B')
    36ec:	80 91 c4 00 	lds	r24, 0x00C4
    36f0:	82 34       	cpi	r24, 0x42	; 66
    36f2:	31 f4       	brne	.+12     	; 0x3700 <APP_voidUpdateSensorReadings+0x32>
	{
		/*Toggle Door sensor state*/
		APP_u8DoorSensorState ^= 1;
    36f4:	80 91 de 00 	lds	r24, 0x00DE
    36f8:	91 e0       	ldi	r25, 0x01	; 1
    36fa:	89 27       	eor	r24, r25
    36fc:	80 93 de 00 	sts	0x00DE, r24
	}
}
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <APP_voidUpdateCurrentMode>:


void APP_voidUpdateCurrentMode(void)
{
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	00 d0       	rcall	.+0      	; 0x370c <APP_voidUpdateCurrentMode+0x6>
    370c:	00 d0       	rcall	.+0      	; 0x370e <APP_voidUpdateCurrentMode+0x8>
    370e:	00 d0       	rcall	.+0      	; 0x3710 <APP_voidUpdateCurrentMode+0xa>
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8InputNumberCounter = 0;
	/*input time array*/
	static u8 APP_u8SetTimeArr[4]		 = {0};

	/*Increment time counter each time to update mode*/
	Local_u8TimeCount++;
    3714:	80 91 ee 00 	lds	r24, 0x00EE
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	80 93 ee 00 	sts	0x00EE, r24

	/*current mode check*/
	if (APP_u8AppMode == APP_REMAINING_DISPLAY_TIME)
    371e:	80 91 df 00 	lds	r24, 0x00DF
    3722:	81 30       	cpi	r24, 0x01	; 1
    3724:	09 f0       	breq	.+2      	; 0x3728 <APP_voidUpdateCurrentMode+0x22>
    3726:	55 c0       	rjmp	.+170    	; 0x37d2 <APP_voidUpdateCurrentMode+0xcc>
	{
		/*current mode is display remaining time*/
		/*Pressed key check*/
		if (APP_u8PressedKey == 'B')
    3728:	80 91 c4 00 	lds	r24, 0x00C4
    372c:	82 34       	cpi	r24, 0x42	; 66
    372e:	b1 f4       	brne	.+44     	; 0x375c <APP_voidUpdateCurrentMode+0x56>
		{
			/*if Door was opened during heating*/
			/*stop heating*/
			APP_u8OutputState = APP_STOP_HEATING;
    3730:	10 92 e0 00 	sts	0x00E0, r1
			/*Change mode to close door mode*/
			APP_u8AppMode	  = APP_CLOSE_DOOR;
    3734:	82 e0       	ldi	r24, 0x02	; 2
    3736:	80 93 df 00 	sts	0x00DF, r24
			/*Save remaining time*/
			APP_u32SetTime	  = APP_u32RemainingTime;
    373a:	80 91 e5 00 	lds	r24, 0x00E5
    373e:	90 91 e6 00 	lds	r25, 0x00E6
    3742:	a0 91 e7 00 	lds	r26, 0x00E7
    3746:	b0 91 e8 00 	lds	r27, 0x00E8
    374a:	80 93 e1 00 	sts	0x00E1, r24
    374e:	90 93 e2 00 	sts	0x00E2, r25
    3752:	a0 93 e3 00 	sts	0x00E3, r26
    3756:	b0 93 e4 00 	sts	0x00E4, r27
    375a:	20 c0       	rjmp	.+64     	; 0x379c <APP_voidUpdateCurrentMode+0x96>
		}
		else if ( (APP_u8PressedKey == 'C') || (APP_u32RemainingTime == 0) )
    375c:	80 91 c4 00 	lds	r24, 0x00C4
    3760:	83 34       	cpi	r24, 0x43	; 67
    3762:	61 f0       	breq	.+24     	; 0x377c <APP_voidUpdateCurrentMode+0x76>
    3764:	80 91 e5 00 	lds	r24, 0x00E5
    3768:	90 91 e6 00 	lds	r25, 0x00E6
    376c:	a0 91 e7 00 	lds	r26, 0x00E7
    3770:	b0 91 e8 00 	lds	r27, 0x00E8
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	a1 05       	cpc	r26, r1
    3778:	b1 05       	cpc	r27, r1
    377a:	81 f4       	brne	.+32     	; 0x379c <APP_voidUpdateCurrentMode+0x96>
		{
			/*reset set time */
			APP_u32SetTime			   = 0;
    377c:	10 92 e1 00 	sts	0x00E1, r1
    3780:	10 92 e2 00 	sts	0x00E2, r1
    3784:	10 92 e3 00 	sts	0x00E3, r1
    3788:	10 92 e4 00 	sts	0x00E4, r1
			/*reset timer counter*/
			Local_u8TimeCount		   = 0;
    378c:	10 92 ee 00 	sts	0x00EE, r1
			/*reset pressed key counter*/
			Local_u8InputNumberCounter = 0;
    3790:	10 92 ed 00 	sts	0x00ED, r1

			/*stop heating*/
			APP_u8OutputState		   = APP_STOP_HEATING;
    3794:	10 92 e0 00 	sts	0x00E0, r1
			/*Change mode to Set time mode*/
			APP_u8AppMode			   = APP_SET_TIME;
    3798:	10 92 df 00 	sts	0x00DF, r1

		}/*end of Pressed key check*/

		/*check time passed*/
		if (Local_u8TimeCount == 5) /*if 1 seconds passed*/
    379c:	80 91 ee 00 	lds	r24, 0x00EE
    37a0:	85 30       	cpi	r24, 0x05	; 5
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <APP_voidUpdateCurrentMode+0xa0>
    37a4:	2a c1       	rjmp	.+596    	; 0x39fa <APP_voidUpdateCurrentMode+0x2f4>
		{
			/*zero time counter to count 1 second again*/
			Local_u8TimeCount  = 0;
    37a6:	10 92 ee 00 	sts	0x00EE, r1
			/*Decrement remaining time by 1*/
			APP_u32RemainingTime--;
    37aa:	80 91 e5 00 	lds	r24, 0x00E5
    37ae:	90 91 e6 00 	lds	r25, 0x00E6
    37b2:	a0 91 e7 00 	lds	r26, 0x00E7
    37b6:	b0 91 e8 00 	lds	r27, 0x00E8
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	a1 09       	sbc	r26, r1
    37be:	b1 09       	sbc	r27, r1
    37c0:	80 93 e5 00 	sts	0x00E5, r24
    37c4:	90 93 e6 00 	sts	0x00E6, r25
    37c8:	a0 93 e7 00 	sts	0x00E7, r26
    37cc:	b0 93 e8 00 	sts	0x00E8, r27
    37d0:	14 c1       	rjmp	.+552    	; 0x39fa <APP_voidUpdateCurrentMode+0x2f4>
		}/*end of time passed check*/
	}
	else /*all other modes*/
	{
		/*Button pressed check*/
		if ( (APP_u8PressedKey >= 0) && (APP_u8PressedKey < 10) )
    37d2:	80 91 c4 00 	lds	r24, 0x00C4
    37d6:	80 91 c4 00 	lds	r24, 0x00C4
    37da:	8a 30       	cpi	r24, 0x0A	; 10
    37dc:	08 f0       	brcs	.+2      	; 0x37e0 <APP_voidUpdateCurrentMode+0xda>
    37de:	69 c0       	rjmp	.+210    	; 0x38b2 <APP_voidUpdateCurrentMode+0x1ac>
		{
			/*reset time count*/
			Local_u8TimeCount = 0;
    37e0:	10 92 ee 00 	sts	0x00EE, r1

			/*number was pressed*/
			APP_u8AppMode	  = APP_SET_TIME;
    37e4:	10 92 df 00 	sts	0x00DF, r1
			/*zero time counter start time wait from beginning*/

			/*accept 4 digit number*/
			if (Local_u8InputNumberCounter < 4)
    37e8:	80 91 ed 00 	lds	r24, 0x00ED
    37ec:	84 30       	cpi	r24, 0x04	; 4
    37ee:	08 f0       	brcs	.+2      	; 0x37f2 <APP_voidUpdateCurrentMode+0xec>
    37f0:	5a c0       	rjmp	.+180    	; 0x38a6 <APP_voidUpdateCurrentMode+0x1a0>
			{
				/*save pressed key in set time array*/
				APP_u8SetTimeArr[Local_u8InputNumberCounter] = APP_u8PressedKey;
    37f2:	80 91 ed 00 	lds	r24, 0x00ED
    37f6:	88 2f       	mov	r24, r24
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	20 91 c4 00 	lds	r18, 0x00C4
    37fe:	fc 01       	movw	r30, r24
    3800:	e7 51       	subi	r30, 0x17	; 23
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	20 83       	st	Z, r18
				/*reset set time variable*/
				APP_u32SetTime = 0;
    3806:	10 92 e1 00 	sts	0x00E1, r1
    380a:	10 92 e2 00 	sts	0x00E2, r1
    380e:	10 92 e3 00 	sts	0x00E3, r1
    3812:	10 92 e4 00 	sts	0x00E4, r1

				/*loop inputed keys*/
				for (u8 i = 0; i < (Local_u8InputNumberCounter+1) ;i++)
    3816:	1d 82       	std	Y+5, r1	; 0x05
    3818:	3a c0       	rjmp	.+116    	; 0x388e <APP_voidUpdateCurrentMode+0x188>
				{
					/*calculate set time value*/
					u32 Local_u32Result = MATH_u32GetExponential(10,(Local_u8InputNumberCounter-i));
    381a:	90 91 ed 00 	lds	r25, 0x00ED
    381e:	8d 81       	ldd	r24, Y+5	; 0x05
    3820:	98 1b       	sub	r25, r24
    3822:	8a e0       	ldi	r24, 0x0A	; 10
    3824:	69 2f       	mov	r22, r25
    3826:	0e 94 37 18 	call	0x306e	; 0x306e <MATH_u32GetExponential>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	9a 83       	std	Y+2, r25	; 0x02
    3832:	ab 83       	std	Y+3, r26	; 0x03
    3834:	bc 83       	std	Y+4, r27	; 0x04
					APP_u32SetTime = APP_u32SetTime + ( ((u32)APP_u8SetTimeArr[i]) * Local_u32Result ) ;
    3836:	8d 81       	ldd	r24, Y+5	; 0x05
    3838:	88 2f       	mov	r24, r24
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	fc 01       	movw	r30, r24
    383e:	e7 51       	subi	r30, 0x17	; 23
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e0       	ldi	r26, 0x00	; 0
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	29 81       	ldd	r18, Y+1	; 0x01
    384e:	3a 81       	ldd	r19, Y+2	; 0x02
    3850:	4b 81       	ldd	r20, Y+3	; 0x03
    3852:	5c 81       	ldd	r21, Y+4	; 0x04
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__mulsi3>
    385c:	9b 01       	movw	r18, r22
    385e:	ac 01       	movw	r20, r24
    3860:	80 91 e1 00 	lds	r24, 0x00E1
    3864:	90 91 e2 00 	lds	r25, 0x00E2
    3868:	a0 91 e3 00 	lds	r26, 0x00E3
    386c:	b0 91 e4 00 	lds	r27, 0x00E4
    3870:	82 0f       	add	r24, r18
    3872:	93 1f       	adc	r25, r19
    3874:	a4 1f       	adc	r26, r20
    3876:	b5 1f       	adc	r27, r21
    3878:	80 93 e1 00 	sts	0x00E1, r24
    387c:	90 93 e2 00 	sts	0x00E2, r25
    3880:	a0 93 e3 00 	sts	0x00E3, r26
    3884:	b0 93 e4 00 	sts	0x00E4, r27
				APP_u8SetTimeArr[Local_u8InputNumberCounter] = APP_u8PressedKey;
				/*reset set time variable*/
				APP_u32SetTime = 0;

				/*loop inputed keys*/
				for (u8 i = 0; i < (Local_u8InputNumberCounter+1) ;i++)
    3888:	8d 81       	ldd	r24, Y+5	; 0x05
    388a:	8f 5f       	subi	r24, 0xFF	; 255
    388c:	8d 83       	std	Y+5, r24	; 0x05
    388e:	8d 81       	ldd	r24, Y+5	; 0x05
    3890:	28 2f       	mov	r18, r24
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	80 91 ed 00 	lds	r24, 0x00ED
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	01 96       	adiw	r24, 0x01	; 1
    389e:	28 17       	cp	r18, r24
    38a0:	39 07       	cpc	r19, r25
    38a2:	0c f4       	brge	.+2      	; 0x38a6 <APP_voidUpdateCurrentMode+0x1a0>
    38a4:	ba cf       	rjmp	.-140    	; 0x381a <APP_voidUpdateCurrentMode+0x114>
				}

			}

			/*increment number of key pressed*/
			Local_u8InputNumberCounter++;
    38a6:	80 91 ed 00 	lds	r24, 0x00ED
    38aa:	8f 5f       	subi	r24, 0xFF	; 255
    38ac:	80 93 ed 00 	sts	0x00ED, r24
    38b0:	92 c0       	rjmp	.+292    	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>

		}
		else if (APP_u8PressedKey == 'C') /*cancel button pressed*/
    38b2:	80 91 c4 00 	lds	r24, 0x00C4
    38b6:	83 34       	cpi	r24, 0x43	; 67
    38b8:	79 f4       	brne	.+30     	; 0x38d8 <APP_voidUpdateCurrentMode+0x1d2>
		{
			/*reset set time */
			APP_u32SetTime			   = 0;
    38ba:	10 92 e1 00 	sts	0x00E1, r1
    38be:	10 92 e2 00 	sts	0x00E2, r1
    38c2:	10 92 e3 00 	sts	0x00E3, r1
    38c6:	10 92 e4 00 	sts	0x00E4, r1
			/*reset timer counter*/
			Local_u8TimeCount		   = 0;
    38ca:	10 92 ee 00 	sts	0x00EE, r1
			/*reset pressed key counter*/
			Local_u8InputNumberCounter = 0;
    38ce:	10 92 ed 00 	sts	0x00ED, r1
			/*Change mode to set time mode*/
			APP_u8AppMode			   = APP_SET_TIME;
    38d2:	10 92 df 00 	sts	0x00DF, r1
    38d6:	7f c0       	rjmp	.+254    	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>

		}
		else if (APP_u8PressedKey == 'D') /**/
    38d8:	80 91 c4 00 	lds	r24, 0x00C4
    38dc:	84 34       	cpi	r24, 0x44	; 68
    38de:	09 f0       	breq	.+2      	; 0x38e2 <APP_voidUpdateCurrentMode+0x1dc>
    38e0:	7a c0       	rjmp	.+244    	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
		{
			/*zero time counter start time wait from beginning*/
			Local_u8TimeCount = 0;
    38e2:	10 92 ee 00 	sts	0x00EE, r1

			/*sensors check*/
			/*when time is set, food in microwave, and door is closed start heating*/
			if( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_OFF) && (APP_u8DoorSensorState == APP_SENSOR_OFF) )
    38e6:	80 91 e1 00 	lds	r24, 0x00E1
    38ea:	90 91 e2 00 	lds	r25, 0x00E2
    38ee:	a0 91 e3 00 	lds	r26, 0x00E3
    38f2:	b0 91 e4 00 	lds	r27, 0x00E4
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	a1 05       	cpc	r26, r1
    38fa:	b1 05       	cpc	r27, r1
    38fc:	f9 f0       	breq	.+62     	; 0x393c <APP_voidUpdateCurrentMode+0x236>
    38fe:	80 91 dd 00 	lds	r24, 0x00DD
    3902:	88 23       	and	r24, r24
    3904:	d9 f4       	brne	.+54     	; 0x393c <APP_voidUpdateCurrentMode+0x236>
    3906:	80 91 de 00 	lds	r24, 0x00DE
    390a:	88 23       	and	r24, r24
    390c:	b9 f4       	brne	.+46     	; 0x393c <APP_voidUpdateCurrentMode+0x236>
			{
				/*set remaining time with set time value*/
				APP_u32RemainingTime = APP_u32SetTime;
    390e:	80 91 e1 00 	lds	r24, 0x00E1
    3912:	90 91 e2 00 	lds	r25, 0x00E2
    3916:	a0 91 e3 00 	lds	r26, 0x00E3
    391a:	b0 91 e4 00 	lds	r27, 0x00E4
    391e:	80 93 e5 00 	sts	0x00E5, r24
    3922:	90 93 e6 00 	sts	0x00E6, r25
    3926:	a0 93 e7 00 	sts	0x00E7, r26
    392a:	b0 93 e8 00 	sts	0x00E8, r27
				/*start heating process*/
				APP_u8OutputState = APP_START_HEATING;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	80 93 e0 00 	sts	0x00E0, r24
				/*Change mode to display remaining time mode*/
				APP_u8AppMode = APP_REMAINING_DISPLAY_TIME;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	80 93 df 00 	sts	0x00DF, r24
    393a:	4d c0       	rjmp	.+154    	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
			}

			/*door is opened*/
			else if( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_OFF) && (APP_u8DoorSensorState == APP_SENSOR_ON) )
    393c:	80 91 e1 00 	lds	r24, 0x00E1
    3940:	90 91 e2 00 	lds	r25, 0x00E2
    3944:	a0 91 e3 00 	lds	r26, 0x00E3
    3948:	b0 91 e4 00 	lds	r27, 0x00E4
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	a1 05       	cpc	r26, r1
    3950:	b1 05       	cpc	r27, r1
    3952:	71 f0       	breq	.+28     	; 0x3970 <APP_voidUpdateCurrentMode+0x26a>
    3954:	80 91 dd 00 	lds	r24, 0x00DD
    3958:	88 23       	and	r24, r24
    395a:	51 f4       	brne	.+20     	; 0x3970 <APP_voidUpdateCurrentMode+0x26a>
    395c:	80 91 de 00 	lds	r24, 0x00DE
    3960:	81 30       	cpi	r24, 0x01	; 1
    3962:	31 f4       	brne	.+12     	; 0x3970 <APP_voidUpdateCurrentMode+0x26a>
			{
				/*stop heating process*/
				APP_u8OutputState = APP_STOP_HEATING;
    3964:	10 92 e0 00 	sts	0x00E0, r1
				/*change mode to close door*/
				APP_u8AppMode	  = APP_CLOSE_DOOR;
    3968:	82 e0       	ldi	r24, 0x02	; 2
    396a:	80 93 df 00 	sts	0x00DF, r24
    396e:	33 c0       	rjmp	.+102    	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
			}

			/*there is no food*/
			else if ( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_ON) && (APP_u8DoorSensorState == APP_SENSOR_OFF) )
    3970:	80 91 e1 00 	lds	r24, 0x00E1
    3974:	90 91 e2 00 	lds	r25, 0x00E2
    3978:	a0 91 e3 00 	lds	r26, 0x00E3
    397c:	b0 91 e4 00 	lds	r27, 0x00E4
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	a1 05       	cpc	r26, r1
    3984:	b1 05       	cpc	r27, r1
    3986:	71 f0       	breq	.+28     	; 0x39a4 <APP_voidUpdateCurrentMode+0x29e>
    3988:	80 91 dd 00 	lds	r24, 0x00DD
    398c:	81 30       	cpi	r24, 0x01	; 1
    398e:	51 f4       	brne	.+20     	; 0x39a4 <APP_voidUpdateCurrentMode+0x29e>
    3990:	80 91 de 00 	lds	r24, 0x00DE
    3994:	88 23       	and	r24, r24
    3996:	31 f4       	brne	.+12     	; 0x39a4 <APP_voidUpdateCurrentMode+0x29e>
			{
				/*stop heating process*/
				APP_u8OutputState = APP_STOP_HEATING;
    3998:	10 92 e0 00 	sts	0x00E0, r1
				/*change mode to put food*/
				APP_u8AppMode	  = APP_PUT_FOOD;
    399c:	83 e0       	ldi	r24, 0x03	; 3
    399e:	80 93 df 00 	sts	0x00DF, r24
    39a2:	19 c0       	rjmp	.+50     	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
			}

			/*door is open and there is n food*/
			else if ( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_ON) && (APP_u8DoorSensorState == APP_SENSOR_ON) )
    39a4:	80 91 e1 00 	lds	r24, 0x00E1
    39a8:	90 91 e2 00 	lds	r25, 0x00E2
    39ac:	a0 91 e3 00 	lds	r26, 0x00E3
    39b0:	b0 91 e4 00 	lds	r27, 0x00E4
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	a1 05       	cpc	r26, r1
    39b8:	b1 05       	cpc	r27, r1
    39ba:	69 f0       	breq	.+26     	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
    39bc:	80 91 dd 00 	lds	r24, 0x00DD
    39c0:	81 30       	cpi	r24, 0x01	; 1
    39c2:	49 f4       	brne	.+18     	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
    39c4:	80 91 de 00 	lds	r24, 0x00DE
    39c8:	81 30       	cpi	r24, 0x01	; 1
    39ca:	29 f4       	brne	.+10     	; 0x39d6 <APP_voidUpdateCurrentMode+0x2d0>
			{
				/*stop heating process*/
				APP_u8OutputState = APP_STOP_HEATING;
    39cc:	10 92 e0 00 	sts	0x00E0, r1
				/*change mode to close door and put food*/
				APP_u8AppMode	  = APP_CLOSE_DOOR_PUT_FOOD;
    39d0:	84 e0       	ldi	r24, 0x04	; 4
    39d2:	80 93 df 00 	sts	0x00DF, r24
			}
		}

		/*check time passed*/
		if (Local_u8TimeCount == 50) /*if 3 seconds passed*/
    39d6:	80 91 ee 00 	lds	r24, 0x00EE
    39da:	82 33       	cpi	r24, 0x32	; 50
    39dc:	71 f4       	brne	.+28     	; 0x39fa <APP_voidUpdateCurrentMode+0x2f4>
		{
			/*set mode to set time*/
			APP_u8AppMode	   = APP_SET_TIME;
    39de:	10 92 df 00 	sts	0x00DF, r1
			/*Make display temp current mode*/
			APP_u32SetTime     = 0;
    39e2:	10 92 e1 00 	sts	0x00E1, r1
    39e6:	10 92 e2 00 	sts	0x00E2, r1
    39ea:	10 92 e3 00 	sts	0x00E3, r1
    39ee:	10 92 e4 00 	sts	0x00E4, r1
			/*reset time counter*/
			Local_u8TimeCount  = 0;
    39f2:	10 92 ee 00 	sts	0x00EE, r1
			/*reset number of pressed key counter*/
			Local_u8InputNumberCounter = 0;
    39f6:	10 92 ed 00 	sts	0x00ED, r1
		}
	}
}
    39fa:	26 96       	adiw	r28, 0x06	; 6
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <APP_voidUpdateOutputState>:


void APP_voidUpdateOutputState(void)
{
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
	/*Set heater on or off*/
	DIO_u8SetPinValue(APP_HEATER_PORT, APP_HEATER_PIN,APP_u8OutputState);
    3a14:	90 91 e0 00 	lds	r25, 0x00E0
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	49 2f       	mov	r20, r25
    3a1e:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	/*Set Motor on or off*/
	DIO_u8SetPinValue(APP_LAMP_PORT, APP_LAMP_PIN,APP_u8OutputState);
    3a22:	90 91 e0 00 	lds	r25, 0x00E0
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	61 e0       	ldi	r22, 0x01	; 1
    3a2a:	49 2f       	mov	r20, r25
    3a2c:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	/*Set Lamp on or off*/
	DIO_u8SetPinValue(APP_MOTOR_PORT, APP_MOTOR_PIN,APP_u8OutputState);
    3a30:	90 91 e0 00 	lds	r25, 0x00E0
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	62 e0       	ldi	r22, 0x02	; 2
    3a38:	49 2f       	mov	r20, r25
    3a3a:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>

	/*Set door sensor indication led on or off*/
	DIO_u8SetPinValue(APP_DOOR_SENSOR_PORT, APP_DOOR_SENSOR_PIN, APP_u8DoorSensorState);
    3a3e:	90 91 de 00 	lds	r25, 0x00DE
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	63 e0       	ldi	r22, 0x03	; 3
    3a46:	49 2f       	mov	r20, r25
    3a48:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
	/*Set Weight sensor indication led on or off*/
	DIO_u8SetPinValue(APP_WEIGH_SENSOR_PORT, APP_WEIGH_SENSOR_PIN, APP_u8WeightSensorState);
    3a4c:	90 91 dd 00 	lds	r25, 0x00DD
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	64 e0       	ldi	r22, 0x04	; 4
    3a54:	49 2f       	mov	r20, r25
    3a56:	0e 94 bb 13 	call	0x2776	; 0x2776 <DIO_u8SetPinValue>
}
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <__mulsi3>:
    3a60:	62 9f       	mul	r22, r18
    3a62:	d0 01       	movw	r26, r0
    3a64:	73 9f       	mul	r23, r19
    3a66:	f0 01       	movw	r30, r0
    3a68:	82 9f       	mul	r24, r18
    3a6a:	e0 0d       	add	r30, r0
    3a6c:	f1 1d       	adc	r31, r1
    3a6e:	64 9f       	mul	r22, r20
    3a70:	e0 0d       	add	r30, r0
    3a72:	f1 1d       	adc	r31, r1
    3a74:	92 9f       	mul	r25, r18
    3a76:	f0 0d       	add	r31, r0
    3a78:	83 9f       	mul	r24, r19
    3a7a:	f0 0d       	add	r31, r0
    3a7c:	74 9f       	mul	r23, r20
    3a7e:	f0 0d       	add	r31, r0
    3a80:	65 9f       	mul	r22, r21
    3a82:	f0 0d       	add	r31, r0
    3a84:	99 27       	eor	r25, r25
    3a86:	72 9f       	mul	r23, r18
    3a88:	b0 0d       	add	r27, r0
    3a8a:	e1 1d       	adc	r30, r1
    3a8c:	f9 1f       	adc	r31, r25
    3a8e:	63 9f       	mul	r22, r19
    3a90:	b0 0d       	add	r27, r0
    3a92:	e1 1d       	adc	r30, r1
    3a94:	f9 1f       	adc	r31, r25
    3a96:	bd 01       	movw	r22, r26
    3a98:	cf 01       	movw	r24, r30
    3a9a:	11 24       	eor	r1, r1
    3a9c:	08 95       	ret

00003a9e <__udivmodsi4>:
    3a9e:	a1 e2       	ldi	r26, 0x21	; 33
    3aa0:	1a 2e       	mov	r1, r26
    3aa2:	aa 1b       	sub	r26, r26
    3aa4:	bb 1b       	sub	r27, r27
    3aa6:	fd 01       	movw	r30, r26
    3aa8:	0d c0       	rjmp	.+26     	; 0x3ac4 <__udivmodsi4_ep>

00003aaa <__udivmodsi4_loop>:
    3aaa:	aa 1f       	adc	r26, r26
    3aac:	bb 1f       	adc	r27, r27
    3aae:	ee 1f       	adc	r30, r30
    3ab0:	ff 1f       	adc	r31, r31
    3ab2:	a2 17       	cp	r26, r18
    3ab4:	b3 07       	cpc	r27, r19
    3ab6:	e4 07       	cpc	r30, r20
    3ab8:	f5 07       	cpc	r31, r21
    3aba:	20 f0       	brcs	.+8      	; 0x3ac4 <__udivmodsi4_ep>
    3abc:	a2 1b       	sub	r26, r18
    3abe:	b3 0b       	sbc	r27, r19
    3ac0:	e4 0b       	sbc	r30, r20
    3ac2:	f5 0b       	sbc	r31, r21

00003ac4 <__udivmodsi4_ep>:
    3ac4:	66 1f       	adc	r22, r22
    3ac6:	77 1f       	adc	r23, r23
    3ac8:	88 1f       	adc	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	1a 94       	dec	r1
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <__udivmodsi4_loop>
    3ad0:	60 95       	com	r22
    3ad2:	70 95       	com	r23
    3ad4:	80 95       	com	r24
    3ad6:	90 95       	com	r25
    3ad8:	9b 01       	movw	r18, r22
    3ada:	ac 01       	movw	r20, r24
    3adc:	bd 01       	movw	r22, r26
    3ade:	cf 01       	movw	r24, r30
    3ae0:	08 95       	ret

00003ae2 <__prologue_saves__>:
    3ae2:	2f 92       	push	r2
    3ae4:	3f 92       	push	r3
    3ae6:	4f 92       	push	r4
    3ae8:	5f 92       	push	r5
    3aea:	6f 92       	push	r6
    3aec:	7f 92       	push	r7
    3aee:	8f 92       	push	r8
    3af0:	9f 92       	push	r9
    3af2:	af 92       	push	r10
    3af4:	bf 92       	push	r11
    3af6:	cf 92       	push	r12
    3af8:	df 92       	push	r13
    3afa:	ef 92       	push	r14
    3afc:	ff 92       	push	r15
    3afe:	0f 93       	push	r16
    3b00:	1f 93       	push	r17
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	ca 1b       	sub	r28, r26
    3b0c:	db 0b       	sbc	r29, r27
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	09 94       	ijmp

00003b1a <__epilogue_restores__>:
    3b1a:	2a 88       	ldd	r2, Y+18	; 0x12
    3b1c:	39 88       	ldd	r3, Y+17	; 0x11
    3b1e:	48 88       	ldd	r4, Y+16	; 0x10
    3b20:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b22:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b24:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b26:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b28:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b2c:	b9 84       	ldd	r11, Y+9	; 0x09
    3b2e:	c8 84       	ldd	r12, Y+8	; 0x08
    3b30:	df 80       	ldd	r13, Y+7	; 0x07
    3b32:	ee 80       	ldd	r14, Y+6	; 0x06
    3b34:	fd 80       	ldd	r15, Y+5	; 0x05
    3b36:	0c 81       	ldd	r16, Y+4	; 0x04
    3b38:	1b 81       	ldd	r17, Y+3	; 0x03
    3b3a:	aa 81       	ldd	r26, Y+2	; 0x02
    3b3c:	b9 81       	ldd	r27, Y+1	; 0x01
    3b3e:	ce 0f       	add	r28, r30
    3b40:	d1 1d       	adc	r29, r1
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	ed 01       	movw	r28, r26
    3b4e:	08 95       	ret

00003b50 <itoa>:
    3b50:	fb 01       	movw	r30, r22
    3b52:	9f 01       	movw	r18, r30
    3b54:	e8 94       	clt
    3b56:	42 30       	cpi	r20, 0x02	; 2
    3b58:	c4 f0       	brlt	.+48     	; 0x3b8a <itoa+0x3a>
    3b5a:	45 32       	cpi	r20, 0x25	; 37
    3b5c:	b4 f4       	brge	.+44     	; 0x3b8a <itoa+0x3a>
    3b5e:	4a 30       	cpi	r20, 0x0A	; 10
    3b60:	29 f4       	brne	.+10     	; 0x3b6c <itoa+0x1c>
    3b62:	97 fb       	bst	r25, 7
    3b64:	1e f4       	brtc	.+6      	; 0x3b6c <itoa+0x1c>
    3b66:	90 95       	com	r25
    3b68:	81 95       	neg	r24
    3b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6c:	64 2f       	mov	r22, r20
    3b6e:	77 27       	eor	r23, r23
    3b70:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__udivmodhi4>
    3b74:	80 5d       	subi	r24, 0xD0	; 208
    3b76:	8a 33       	cpi	r24, 0x3A	; 58
    3b78:	0c f0       	brlt	.+2      	; 0x3b7c <itoa+0x2c>
    3b7a:	89 5d       	subi	r24, 0xD9	; 217
    3b7c:	81 93       	st	Z+, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	a1 f7       	brne	.-24     	; 0x3b6c <itoa+0x1c>
    3b84:	16 f4       	brtc	.+4      	; 0x3b8a <itoa+0x3a>
    3b86:	5d e2       	ldi	r21, 0x2D	; 45
    3b88:	51 93       	st	Z+, r21
    3b8a:	10 82       	st	Z, r1
    3b8c:	c9 01       	movw	r24, r18
    3b8e:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <strrev>

00003b92 <strrev>:
    3b92:	dc 01       	movw	r26, r24
    3b94:	fc 01       	movw	r30, r24
    3b96:	67 2f       	mov	r22, r23
    3b98:	71 91       	ld	r23, Z+
    3b9a:	77 23       	and	r23, r23
    3b9c:	e1 f7       	brne	.-8      	; 0x3b96 <strrev+0x4>
    3b9e:	32 97       	sbiw	r30, 0x02	; 2
    3ba0:	04 c0       	rjmp	.+8      	; 0x3baa <strrev+0x18>
    3ba2:	7c 91       	ld	r23, X
    3ba4:	6d 93       	st	X+, r22
    3ba6:	70 83       	st	Z, r23
    3ba8:	62 91       	ld	r22, -Z
    3baa:	ae 17       	cp	r26, r30
    3bac:	bf 07       	cpc	r27, r31
    3bae:	c8 f3       	brcs	.-14     	; 0x3ba2 <strrev+0x10>
    3bb0:	08 95       	ret

00003bb2 <__udivmodhi4>:
    3bb2:	aa 1b       	sub	r26, r26
    3bb4:	bb 1b       	sub	r27, r27
    3bb6:	51 e1       	ldi	r21, 0x11	; 17
    3bb8:	07 c0       	rjmp	.+14     	; 0x3bc8 <__udivmodhi4_ep>

00003bba <__udivmodhi4_loop>:
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	a6 17       	cp	r26, r22
    3bc0:	b7 07       	cpc	r27, r23
    3bc2:	10 f0       	brcs	.+4      	; 0x3bc8 <__udivmodhi4_ep>
    3bc4:	a6 1b       	sub	r26, r22
    3bc6:	b7 0b       	sbc	r27, r23

00003bc8 <__udivmodhi4_ep>:
    3bc8:	88 1f       	adc	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	5a 95       	dec	r21
    3bce:	a9 f7       	brne	.-22     	; 0x3bba <__udivmodhi4_loop>
    3bd0:	80 95       	com	r24
    3bd2:	90 95       	com	r25
    3bd4:	bc 01       	movw	r22, r24
    3bd6:	cd 01       	movw	r24, r26
    3bd8:	08 95       	ret

00003bda <_exit>:
    3bda:	f8 94       	cli

00003bdc <__stop_program>:
    3bdc:	ff cf       	rjmp	.-2      	; 0x3bdc <__stop_program>
